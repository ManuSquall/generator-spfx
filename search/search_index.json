{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PnP SPFx Yeoman generator \u00b6 This Yeoman generator provides improved governance for SharePoint Framework projects. It extends the out of the box Yeoman generator from Microsoft (@microsoft/generator-sharepoint) with recommended patterns and additional capabilities. For an optimized development workflow, it extends the capabilities for ReactJS, and Knockout projects and support for additional frameworks, such as HandlebarsJS, Aurelia, VueJS and Angular Elements. It also includes includes advanced code analysis and testing tools, which you can take advantage of in your development work. All projects generated by this generator are 100% compliant with the out-of-the-box Yeoman generator from Microsoft. After the creation of a new solution, you can use either this generator or @microsoft/generator-sharepoint to add additional assets to your solution. SPFx Generator Version \u00b6 Base Generator @microsoft/generator-sharepoint 1.11.0 Features \u00b6 This generator supports a variety of frameworks and features such as: VueJS Handlebars Angular Elements Aurelia Addons such as JEST, StyleLint or WebPack Bundle analyser More on that in the features section . Installation \u00b6 via NPM \u00b6 npm install -g @pnp/generator-spfx via YARN \u00b6 yarn global add @pnp/generator-spfx via PNPM \u00b6 pnpm install -g @pnp/generator-spfx For Evaluation and Testing \u00b6 This generator can be also tested via npx and the following command: npx -p yo -p @pnp/generator-spfx yo @pnp/spfx It will create a new project without installation of the generator. To add other assets the same command line can be executed again on the project folder. Start a new project \u00b6 To start a new project execute the following command: yo @pnp/spfx This will start the PnP SPFx Yeoman generator for a new project that gives you all the options to choose from. Watch it in action \u00b6 Command line options \u00b6 The following options provide a complete list of available switches. Usage: yo @pnp/spfx [ options ] Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers - Default: false --skip-install # Do not automatically install dependencies - Default: false --force-install # Fail on install dependencies error - Default: false --component-description # Web part description --component-name # Web part name --component-type # The type of component: - \"webpart\" - \"extension\" --environment # The target environment for the solution: - \"onprem\" - \"onprem19\" - \"spo\" --extension-type # The type of extension: - \"ApplicationCustomizer\" , - \"FieldCustomizer\" - \"ListViewCommandSet\" -pm, --package-manager # Let you choose the package manager: - \"npm\" - \"yarn\" - \"pnpm\" --plusbeta # Use the beta packages --skip-feature-deployment # If specified, allow the tenant admin the choice of being able to deploy the components to all sites immediately without running any feature deployment or adding apps in sites --solution-name # Solution name, as well as folder name Further information \u00b6 General project setup and folders Known Issues","title":"Home"},{"location":"#pnp-spfx-yeoman-generator","text":"This Yeoman generator provides improved governance for SharePoint Framework projects. It extends the out of the box Yeoman generator from Microsoft (@microsoft/generator-sharepoint) with recommended patterns and additional capabilities. For an optimized development workflow, it extends the capabilities for ReactJS, and Knockout projects and support for additional frameworks, such as HandlebarsJS, Aurelia, VueJS and Angular Elements. It also includes includes advanced code analysis and testing tools, which you can take advantage of in your development work. All projects generated by this generator are 100% compliant with the out-of-the-box Yeoman generator from Microsoft. After the creation of a new solution, you can use either this generator or @microsoft/generator-sharepoint to add additional assets to your solution.","title":"PnP SPFx Yeoman generator"},{"location":"#spfx-generator-version","text":"Base Generator @microsoft/generator-sharepoint 1.11.0","title":"SPFx Generator Version"},{"location":"#features","text":"This generator supports a variety of frameworks and features such as: VueJS Handlebars Angular Elements Aurelia Addons such as JEST, StyleLint or WebPack Bundle analyser More on that in the features section .","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#via-npm","text":"npm install -g @pnp/generator-spfx","title":"via NPM"},{"location":"#via-yarn","text":"yarn global add @pnp/generator-spfx","title":"via YARN"},{"location":"#via-pnpm","text":"pnpm install -g @pnp/generator-spfx","title":"via PNPM"},{"location":"#for-evaluation-and-testing","text":"This generator can be also tested via npx and the following command: npx -p yo -p @pnp/generator-spfx yo @pnp/spfx It will create a new project without installation of the generator. To add other assets the same command line can be executed again on the project folder.","title":"For Evaluation and Testing"},{"location":"#start-a-new-project","text":"To start a new project execute the following command: yo @pnp/spfx This will start the PnP SPFx Yeoman generator for a new project that gives you all the options to choose from.","title":"Start a new project"},{"location":"#watch-it-in-action","text":"","title":"Watch it in action"},{"location":"#command-line-options","text":"The following options provide a complete list of available switches. Usage: yo @pnp/spfx [ options ] Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers - Default: false --skip-install # Do not automatically install dependencies - Default: false --force-install # Fail on install dependencies error - Default: false --component-description # Web part description --component-name # Web part name --component-type # The type of component: - \"webpart\" - \"extension\" --environment # The target environment for the solution: - \"onprem\" - \"onprem19\" - \"spo\" --extension-type # The type of extension: - \"ApplicationCustomizer\" , - \"FieldCustomizer\" - \"ListViewCommandSet\" -pm, --package-manager # Let you choose the package manager: - \"npm\" - \"yarn\" - \"pnpm\" --plusbeta # Use the beta packages --skip-feature-deployment # If specified, allow the tenant admin the choice of being able to deploy the components to all sites immediately without running any feature deployment or adding apps in sites --solution-name # Solution name, as well as folder name","title":"Command line options"},{"location":"#further-information","text":"General project setup and folders Known Issues","title":"Further information"},{"location":"about/","text":"About @pnp/generator-spfx \u00b6 This Yeoman generator provides improved governance for SharePoint Framework projects. It extends the out of the box Yeoman generator from Microsoft (@microsoft/generator-sharepoint) with recommended patterns and additional capabilities. For an optimized development workflow, it extends the capabilities for ReactJS, and Knockout projects and support for additional frameworks, such as HandlebarsJS, VueJS, Aurelia and Angular Elements. It also includes includes advanced code analysis and testing tools, which you can take advantage in you development work. All projects generated by this generator are 100% compliant with the out-of-the-box Yeoman generator from Microsoft. After the creation of a new solution, you can use either this generator or @microsoft/generator-sharepoint to add additional assets to your solution.","title":"About"},{"location":"about/#about-pnpgenerator-spfx","text":"This Yeoman generator provides improved governance for SharePoint Framework projects. It extends the out of the box Yeoman generator from Microsoft (@microsoft/generator-sharepoint) with recommended patterns and additional capabilities. For an optimized development workflow, it extends the capabilities for ReactJS, and Knockout projects and support for additional frameworks, such as HandlebarsJS, VueJS, Aurelia and Angular Elements. It also includes includes advanced code analysis and testing tools, which you can take advantage in you development work. All projects generated by this generator are 100% compliant with the out-of-the-box Yeoman generator from Microsoft. After the creation of a new solution, you can use either this generator or @microsoft/generator-sharepoint to add additional assets to your solution.","title":"About @pnp/generator-spfx"},{"location":"contribution-guidelines/","text":"Contribution Guidelines \u00b6 There are not many contribution guidelines yet. If, however, you are not currently familiar with Yeoman generator development you will find some helpful links. Basic technologies to know \u00b6 Write your own Yeoman generator - This article provides you with basic insights on how to write a custom Yeoman generator Mocha getting started - To test that the Yeoman generator is working properly a testing framework named Mocha is used Embedded JavaScript templating - EJS is the core engine used in Yeoman to deploy template files and dynamically embed custom settings in the files getting deployed Places to look for help \u00b6 The JavaScript a Yeoman generator uses is based on Node.js and many things are treated differently than in the JavaScript that exists in browsers. Yeoman API Documentation - Besides the getting started guide, there is official documentation available that covers the complete Yeoman API Node.js documentation - In general, a Yeoman generator is written in JavaScript but it is based on Node.js where the development patterns are slightly different. In some cases it might be handy to consult the Node.js documentation.","title":"Contribution Guidelines"},{"location":"contribution-guidelines/#contribution-guidelines","text":"There are not many contribution guidelines yet. If, however, you are not currently familiar with Yeoman generator development you will find some helpful links.","title":"Contribution Guidelines"},{"location":"contribution-guidelines/#basic-technologies-to-know","text":"Write your own Yeoman generator - This article provides you with basic insights on how to write a custom Yeoman generator Mocha getting started - To test that the Yeoman generator is working properly a testing framework named Mocha is used Embedded JavaScript templating - EJS is the core engine used in Yeoman to deploy template files and dynamically embed custom settings in the files getting deployed","title":"Basic technologies to know"},{"location":"contribution-guidelines/#places-to-look-for-help","text":"The JavaScript a Yeoman generator uses is based on Node.js and many things are treated differently than in the JavaScript that exists in browsers. Yeoman API Documentation - Besides the getting started guide, there is official documentation available that covers the complete Yeoman API Node.js documentation - In general, a Yeoman generator is written in JavaScript but it is based on Node.js where the development patterns are slightly different. In some cases it might be handy to consult the Node.js documentation.","title":"Places to look for help"},{"location":"faq/","text":"Frequently asked questions \u00b6 Why can't I use TypeScript? \u00b6 All project created with this generator use regular TypeScript like all SPFx projects. The code for the generator is not written in TypeScript. TypeScript requires compilation to JavaScript. This results would be more complexity and less support from the Yeoman community. To keep it plain and simple - only Node.js is be used for this generator. What is the difference between NodeJS and JavaScript? \u00b6 Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. It is used to develop backend services, shell scripts, development tools, and many more things. Node.js supports most of the features of the ECMA Script / JavaScript specification. All browsers run JavaScript, but do not always support the latest features of the ECMA Script Specification Do I need to install @microsoft/generator-sharepoint? \u00b6 No - The PnP SPFx generator has a dependency on a specific version of @microsoft/generator-sharepoint. This version will be automatically installed with the npm package of this generator. Can I have different versions of @microsoft/generator-sharepoint installed? \u00b6 Yes, you can, for example, have version 1.4.1 installed manually on your machine. When you run yo @microsoft/sharepoint this version will be used. However, when you run yo @pnp/spfx the version the community generator was built on will be used. For example, version 1.7 instead.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"faq/#why-cant-i-use-typescript","text":"All project created with this generator use regular TypeScript like all SPFx projects. The code for the generator is not written in TypeScript. TypeScript requires compilation to JavaScript. This results would be more complexity and less support from the Yeoman community. To keep it plain and simple - only Node.js is be used for this generator.","title":"Why can't I use TypeScript?"},{"location":"faq/#what-is-the-difference-between-nodejs-and-javascript","text":"Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. It is used to develop backend services, shell scripts, development tools, and many more things. Node.js supports most of the features of the ECMA Script / JavaScript specification. All browsers run JavaScript, but do not always support the latest features of the ECMA Script Specification","title":"What is the difference between NodeJS and JavaScript?"},{"location":"faq/#do-i-need-to-install-microsoftgenerator-sharepoint","text":"No - The PnP SPFx generator has a dependency on a specific version of @microsoft/generator-sharepoint. This version will be automatically installed with the npm package of this generator.","title":"Do I need to install @microsoft/generator-sharepoint?"},{"location":"faq/#can-i-have-different-versions-of-microsoftgenerator-sharepoint-installed","text":"Yes, you can, for example, have version 1.4.1 installed manually on your machine. When you run yo @microsoft/sharepoint this version will be used. However, when you run yo @pnp/spfx the version the community generator was built on will be used. For example, version 1.7 instead.","title":"Can I have different versions of @microsoft/generator-sharepoint installed?"},{"location":"features/","text":"Feature overview \u00b6 The official SPFx generator targets for three specific platforms: SharePoint Online SharePoint Online and SharePoint 2019 SharePoint Online, SharePoint 2019, SharePoint 2016 Not all those options generate the same version of SPFx projects and the available features are limited to the lowest supported version. Depending on the selections made different options can be supported by the SharePoint Framework. Angular Elements \u00b6 Angular Elements is currently supported using Angular 6, Angular 7, Angular 8. SharePoint Online \u00b6 This options create a project based on the latest SPFx version 1.7.1 Addons \u00b6 jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 \u2705 \u2705 KnockoutJS \u2705 \u2705 \u2705 No Framework \u2705 \u2705 \u2705 VueJS \u2705 \u2705 \u2705 HandlebarsJS \u2705 \u2705 \u2705 Angular Elements \u2705 \u2705 \u2705 Aurelia \u2705 \u2705 \u2705 Vetting Options \u00b6 WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 VueJS \u2705 HandlebarsJS \u2705 \u2705 Angular Elements \u2705 \u2705 Aurelia \u2705 \u2705 Test Framework \u00b6 Jest ReactJS \u2705 KnockoutJS No Framework \u2705 VueJS HandlebarsJS Angular Elements SharePoint Online and SharePoint 2019 \u00b6 This option creates a project based on SPFx version 1.4.0 In version 1.11.1 - Support for VueJS was removed due limitations of the SPFx project setup Addons \u00b6 jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 \u2705 \u2705 KnockoutJS \u2705 \u2705 \u2705 No Framework \u2705 \u2705 \u2705 HandlebarsJS \u2705 \u2705 \u2705 Angular Elements \u2705 \u2705 \u2705 Aurelia \u2705 \u2705 \u2705 Vetting Options \u00b6 WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 HandlebarsJS \u2705 \u2705 Angular Elements \u2705 \u2705 Aurelia \u2705 \u2705 Test Framework \u00b6 Jest ReactJS \u2705 KnockoutJS No Framework \u2705 HandlebarsJS Angular Elements SharePoint Online, SharePoint 2019, SharePoint 2016 \u00b6 This option creates a project based on SPFx version 1.1.0. This old version makes avoid to securly use the following frameworks: VueJS HandlebarsJS Angular Elements Addons \u00b6 jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 Vetting Options \u00b6 WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 Test Framework \u00b6 Jest ReactJS \u2705 KnockoutJS No Framework \u2705","title":"Feature"},{"location":"features/#feature-overview","text":"The official SPFx generator targets for three specific platforms: SharePoint Online SharePoint Online and SharePoint 2019 SharePoint Online, SharePoint 2019, SharePoint 2016 Not all those options generate the same version of SPFx projects and the available features are limited to the lowest supported version. Depending on the selections made different options can be supported by the SharePoint Framework.","title":"Feature overview"},{"location":"features/#angular-elements","text":"Angular Elements is currently supported using Angular 6, Angular 7, Angular 8.","title":"Angular Elements"},{"location":"features/#sharepoint-online","text":"This options create a project based on the latest SPFx version 1.7.1","title":"SharePoint Online"},{"location":"features/#addons","text":"jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 \u2705 \u2705 KnockoutJS \u2705 \u2705 \u2705 No Framework \u2705 \u2705 \u2705 VueJS \u2705 \u2705 \u2705 HandlebarsJS \u2705 \u2705 \u2705 Angular Elements \u2705 \u2705 \u2705 Aurelia \u2705 \u2705 \u2705","title":"Addons"},{"location":"features/#vetting-options","text":"WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 VueJS \u2705 HandlebarsJS \u2705 \u2705 Angular Elements \u2705 \u2705 Aurelia \u2705 \u2705","title":"Vetting Options"},{"location":"features/#test-framework","text":"Jest ReactJS \u2705 KnockoutJS No Framework \u2705 VueJS HandlebarsJS Angular Elements","title":"Test Framework"},{"location":"features/#sharepoint-online-and-sharepoint-2019","text":"This option creates a project based on SPFx version 1.4.0 In version 1.11.1 - Support for VueJS was removed due limitations of the SPFx project setup","title":"SharePoint Online and SharePoint 2019"},{"location":"features/#addons_1","text":"jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 \u2705 \u2705 KnockoutJS \u2705 \u2705 \u2705 No Framework \u2705 \u2705 \u2705 HandlebarsJS \u2705 \u2705 \u2705 Angular Elements \u2705 \u2705 \u2705 Aurelia \u2705 \u2705 \u2705","title":"Addons"},{"location":"features/#vetting-options_1","text":"WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705 HandlebarsJS \u2705 \u2705 Angular Elements \u2705 \u2705 Aurelia \u2705 \u2705","title":"Vetting Options"},{"location":"features/#test-framework_1","text":"Jest ReactJS \u2705 KnockoutJS No Framework \u2705 HandlebarsJS Angular Elements","title":"Test Framework"},{"location":"features/#sharepoint-online-sharepoint-2019-sharepoint-2016","text":"This option creates a project based on SPFx version 1.1.0. This old version makes avoid to securly use the following frameworks: VueJS HandlebarsJS Angular Elements","title":"SharePoint Online, SharePoint 2019, SharePoint 2016"},{"location":"features/#addons_2","text":"jQuery pnp/pnpjs PnP Property Controls PnP Reusable Controls ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705","title":"Addons"},{"location":"features/#vetting-options_2","text":"WebPack Bundle Analyzer StyleLint ReactJS \u2705 \u2705 KnockoutJS \u2705 \u2705 No Framework \u2705 \u2705","title":"Vetting Options"},{"location":"features/#test-framework_2","text":"Jest ReactJS \u2705 KnockoutJS No Framework \u2705","title":"Test Framework"},{"location":"known-issues/","text":"Known Issues \u00b6 Version 1.6.2 \u00b6 When no library and no vetting option get selected 'gulp-sequence' is missing and has to be installed manually using npm install gulp-sequence --save-dev . #158 Version 1.4.0 \u00b6 Problem with 'ng serve' in application created by Angular Elements generator \u00b6 Currently there is an issue with web components polyfill in Angular Elements generator that causes errors when running application using ng serve command. Details on current state and workaround #113 Problem with Handlebars and create folder is selected during SPFx generator \u00b6 Currently there is an issue when the 'create folder for solution' option is selected in the questions of the @microsoft/sharepoint generator. Details on current state #84 If you find one please submit the issue to our GitHub Repository .","title":"Known Issues"},{"location":"known-issues/#known-issues","text":"","title":"Known Issues"},{"location":"known-issues/#version-162","text":"When no library and no vetting option get selected 'gulp-sequence' is missing and has to be installed manually using npm install gulp-sequence --save-dev . #158","title":"Version 1.6.2"},{"location":"known-issues/#version-140","text":"","title":"Version 1.4.0"},{"location":"known-issues/#problem-with-ng-serve-in-application-created-by-angular-elements-generator","text":"Currently there is an issue with web components polyfill in Angular Elements generator that causes errors when running application using ng serve command. Details on current state and workaround #113","title":"Problem with 'ng serve' in application created by Angular Elements generator"},{"location":"known-issues/#problem-with-handlebars-and-create-folder-is-selected-during-spfx-generator","text":"Currently there is an issue when the 'create folder for solution' option is selected in the questions of the @microsoft/sharepoint generator. Details on current state #84 If you find one please submit the issue to our GitHub Repository .","title":"Problem with Handlebars and create folder is selected during SPFx generator"},{"location":"license/","text":"MIT License Copyright (c) 2018 PnP Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"release-notes/","text":"Release Notes \u00b6 1.16.0 Angular 11 support added \u00b6 Angular 11 is now supported by this version. Angular also supports now Source Maps for SPFx other updates: Fluent UI Fabric 7 pnp/controls / pnp/property-controls (2.2, 2.3) pnpjs 2.0.13 VueJS 2.6 Stylelint lodash jquery 3.5.5 Update to latest Yoeman generator version 1.15.1 Graph Toolkit added \u00b6 Graph Toolkit support added #275 Angular: Minifcation issue fixed #278 1.15.0 SPFx 1.11.0 / Angular 10 Support added \u00b6 Upgrade to SPFx 1.11.0 Support for Angular 10 added Update Typescript compiler versions Update Addons to latest versions Remove Knockout Support 1.14.2 Solution / Component naming arguments fix \u00b6 Generator does not respect solution/component naming arguments #268 1.14.1 Angular 9 style support extended \u00b6 Include Angular Elements Styles in SPFx Webpart #266 1.14.0 Angular 9 Support added \u00b6 Addes Angular 9 support and is capable of Angular 6/7/8 CSS Module support for StyleLinter added TypeScript 3.8/3.9 added Minor update VueJS @pnp/spfx-controls-react - v1.19.0 @pnp/pnpjs - 2.0.6 Office 365 CLI 2.10.0 added 1.13.1 Webpack bundle analyzer optimisation \u00b6 Bugfix: #263 Incorrect version check during adding new web part 1.13.0 Webpack bundle analyzer optimisation \u00b6 Webpack bundle analyzer optimisation run only on gulp dist and gulp dev for faster build times during development Runnig during development can accomplished with the switch --analyze Updated dependencies @pnp/spfx-controls-react - 1.18.0 @pnp/pnpjs - 2.0.5 @pnp/spfx-controls-react - 1.18.0 office-ui-fabric-react - 7.115.1 JQuery - 3.5.1 webpack-analyzer - 3.8.0 stylelint - 13.5.0 Handlebars - 4.7.6 1.12.0 Aurelia Framework added \u00b6 Aurelia Framework added 1.11.1 Improvmentens \u00b6 SP 2019 Projects: VueJS was removed due to SPFx 1.4.1 Project re-run detection improvement #232 1.11.0 Upgrade to version 1.10.0 @microsoft/sharepoint \u00b6 Improved support for yarn, pnpm Microsoft Graph types added Update dependencies for Handlebars , VueJS VueJS - Bugfix #213 Upgrade to @microsoft/generator-spfx version 1.10.0 Bugfixes #216 , #218 , #219 , #222 , Documentation update #220 1.10.2 Lodash & Azure DevOps Multi-stage pipeline \u00b6 Azure DevOps Multi-stage pipeline - Preview Minor Azure DevOps updates on mono-stage build pipeline Lodash integration for smaller builds Documentation update on continous integration Upgraded Libraries JEST Presets @voitanos/jest-preset-spfx - 1.2.2 @voitanos/jest-preset-spfx-react15 - 1.3.2 @voitanos/jest-preset-spfx-react16 - 1.3.2 1.10.1 Better unit testing reporting and pipeline caching \u00b6 better unit test and coverage reporting integration with azure devops updated jest-junit dependency added dependencies caching switched to ubuntu agent for better performance Upgraded References sass-loader: 8.0.0 handlebars: 4.5.3 ts-loader: 6.2.1 vue-loader: 15.7.2 vie-property-decorator: 8.3.0 fork-ts-checker-webpack-plugin: 3.0.1 1.10.0 HandlebarsJS - Webpack loader update \u00b6 Angular Bundle, link and Scaffolding fix #206 Updated VueJS Update Handlebars with improved partials and helper support Upgrade Handlebar Projects TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Suppor for library components is broken in @microsoft/generator-sharePoint. #195 , sp-dev-docs#4554 Includes Office UI Fabric - 5.x, 6.x, 6.x Fluent pnp/pnpjs - 1.3.5 pnp/spfx-property-controls - 1.16.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.5.1 Handlebars - 4.3.0 Vue - 2.6.10 Office 365 CLI - 1.23.0 StyleLint - 11.0.0 1.9.1 Support for Angular 8 added \u00b6 Angular Elements option supports now Angular 6/7 and 8 #199 fixed --skip-install not honored when pnpm gets used. TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Suppor tfor library components is broken in @microsoft/generator-sharePoint. #195 , sp-dev-docs#4554 1.9.0 Update to SPFx 1.9.1 \u00b6 Upgrade to SPFx 1.9.1 Angular v6, v7 support added SPFx-uifabric-themes add-on added TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Support for library component Includes Office UI Fabric - 5.x, 6.x, 6.x Fluent pnp/pnpjs - 1.3.5 pnp/spfx-property-controls - 1.16.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.4.1 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.23.0 StyleLint - 10.1.0 1.8.1 Azure DevOps update \u00b6 Azure DevOps CI integration use now NodeJS 10 CSSComb integration Includes pnp/pnpjs - 1.3.3 pnp/spfx-property-controls - 1.15.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.19.0 StyleLint - 10.1.0 1.8.0 Azure DevOps and Jest, Office UI Fabric support, TypeScript version selector \u00b6 Azure DevOps testing has been improved to support Jest testing. TypeScript selection for all SharePoint Online Projects Office UI Fabric integration including Fluent Design 1.7.3 SPFx base generator 1.8.2 update \u00b6 Upgrade to @pnp/office365-cli 1.20.0 1.7.2 SPFx base generator 1.8.2 update \u00b6 Update to SPFx generator version 1.8.2 Dropped support for jQUery version 2 Includes jQuery - 3.4.1 pnp/pnpjs - 1.3.2 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.19.0 1.7.1 SPFx base generator 1.8.1 update \u00b6 Update to SPFx generator version 1.8.1 Updated References pnp/pnpjs - 1.3.2 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.17.0 1.7.0 SPFx base generator 1.8.0 update \u00b6 Update to SPFx generator version 1.8.0 Bugfix command line options for environment 1.6.3 Azure Devops \u00b6 Azure DevOps base integration added by Vincent Biret npm version - Updates package-solution.json and Teams manifest.json with package.json version gulp dev - for package solution for development Jest Testing Framework - is now optional #157 Docker Documentation Bugfix: #158 - Missing gulp-sequence in package.json Updates: @pnp/spfx-property-controls - 1.14.1 @pnp/spfx-controls-react - 1.12.0 1.6.2 Update of the project creation process \u00b6 Only supported options are available now #154 Feature Matrix in documentation updated Bugfix #150 Includes: @pnp/pnpjs - v1.2.9 @pnp/spfx-property-controls - v1.14.0 @pnp/@pnp/spfx-controls-react : v1.11.0 1.6.1 - 'gulp dist', Jest for no framework project \u00b6 Jest testing framework support for 'No Framework' projects New \"gulp dist\" task for faster-creating builds for production ('clean', 'bundle', 'package-solution') Update package versions on VueJS, HandlbarsJS generator Includes: pnp/pnpjs: v1.2.7 @pnp/spfx-property-controls: v1.14.0 @pnp/spfx-controls-react: v1.11.0 Bugfix #147 1.6.0 - Support for Jest, Webpack Bundle Analyser and StyleLint \u00b6 All generator can have support: WebPack Bundle Analyser StyleLint pnp/pnpjs 1.2.8 ReactJS supports: JEST testing support 1.5.0 - Upgrade to version @microsoft/generator-spfx 1.7.0 \u00b6 Upgrade to @microsoft/sharepoint version 1.7 by Pawel Hawrylak Update Test definition for onprem19 - Application Customizer and Web Parts Updated for On-Premises Support SharePoint 2019 Added additional SharePoint 2019 tests domain isolation option added package update checker added 1.4.3 - Handlebarjs Gulp updated \u00b6 Optimisation of Handlbar gulp task behaviour 1.4.2 - Angular Elements - Browser optimisation \u00b6 Polyfill and browser behaviour optimisation 1.4.1 - Angular Element - Bugfix \u00b6 Update on polyfill handling in various browsers 1.4.0 - Angular Generator added \u00b6 New Framework added: Angular Elements Other updates Update Handlebar dependencies Version dependencies update for Addons generator Small fixes for Angular Elements generator Update Handlebar dependencies Version dependencies update for Addons generator Fix Kebab Case naming convention Fixed bug with project name in Angular Elements generator (#107) Update Maintainer email address Added guide for Angular Elements Update package-lock.json Update pnpsays.js 1.3.1 - Version 1.3.1 - Minor bugfix in VueJS generator \u00b6 Bug fixed described in issue #98 1.3.0 - Integration of Office CLI for Version Check and Test Bench update \u00b6 Integration of Office CLI 365 for automated version check Implementation of new the test engine New Core Test Definition, Test Runner and Test Bench implemented Bugfix: Improvement file handling in gulp file Bugfix: #95 - Cannot find @microsoft/generator-sharepoint 1.2 - VueJS added \u00b6 New generator for VueJs - thanks to Alex Terentiev Structural generator change: All components are stored in the folder components . Bugfix for folder creation during project creation #84 Updates on utility class 1.1 - Reusable controls added \u00b6 Integration of Reusable React Controls for SharePoint Solutions Integration of Reusable Property Pane Controls for SharePoint Solutions 1.0 - Initial release \u00b6 First generator release Yeoman generator for Handlebars","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#1160-angular-11-support-added","text":"Angular 11 is now supported by this version. Angular also supports now Source Maps for SPFx other updates: Fluent UI Fabric 7 pnp/controls / pnp/property-controls (2.2, 2.3) pnpjs 2.0.13 VueJS 2.6 Stylelint lodash jquery 3.5.5 Update to latest Yoeman generator version","title":"1.16.0 Angular 11 support added"},{"location":"release-notes/#1151-graph-toolkit-added","text":"Graph Toolkit support added #275 Angular: Minifcation issue fixed #278","title":"1.15.1 Graph Toolkit added"},{"location":"release-notes/#1150-spfx-1110-angular-10-support-added","text":"Upgrade to SPFx 1.11.0 Support for Angular 10 added Update Typescript compiler versions Update Addons to latest versions Remove Knockout Support","title":"1.15.0 SPFx 1.11.0 / Angular 10 Support added"},{"location":"release-notes/#1142-solution-component-naming-arguments-fix","text":"Generator does not respect solution/component naming arguments #268","title":"1.14.2 Solution / Component naming arguments fix"},{"location":"release-notes/#1141-angular-9-style-support-extended","text":"Include Angular Elements Styles in SPFx Webpart #266","title":"1.14.1 Angular 9 style support extended"},{"location":"release-notes/#1140-angular-9-support-added","text":"Addes Angular 9 support and is capable of Angular 6/7/8 CSS Module support for StyleLinter added TypeScript 3.8/3.9 added Minor update VueJS @pnp/spfx-controls-react - v1.19.0 @pnp/pnpjs - 2.0.6 Office 365 CLI 2.10.0 added","title":"1.14.0 Angular 9 Support added"},{"location":"release-notes/#1131-webpack-bundle-analyzer-optimisation","text":"Bugfix: #263 Incorrect version check during adding new web part","title":"1.13.1 Webpack bundle analyzer optimisation"},{"location":"release-notes/#1130-webpack-bundle-analyzer-optimisation","text":"Webpack bundle analyzer optimisation run only on gulp dist and gulp dev for faster build times during development Runnig during development can accomplished with the switch --analyze Updated dependencies @pnp/spfx-controls-react - 1.18.0 @pnp/pnpjs - 2.0.5 @pnp/spfx-controls-react - 1.18.0 office-ui-fabric-react - 7.115.1 JQuery - 3.5.1 webpack-analyzer - 3.8.0 stylelint - 13.5.0 Handlebars - 4.7.6","title":"1.13.0 Webpack bundle analyzer optimisation"},{"location":"release-notes/#1120-aurelia-framework-added","text":"Aurelia Framework added","title":"1.12.0 Aurelia Framework added"},{"location":"release-notes/#1111-improvmentens","text":"SP 2019 Projects: VueJS was removed due to SPFx 1.4.1 Project re-run detection improvement #232","title":"1.11.1 Improvmentens"},{"location":"release-notes/#1110-upgrade-to-version-1100-microsoftsharepoint","text":"Improved support for yarn, pnpm Microsoft Graph types added Update dependencies for Handlebars , VueJS VueJS - Bugfix #213 Upgrade to @microsoft/generator-spfx version 1.10.0 Bugfixes #216 , #218 , #219 , #222 , Documentation update #220","title":"1.11.0 Upgrade to version 1.10.0 @microsoft/sharepoint"},{"location":"release-notes/#1102-lodash-azure-devops-multi-stage-pipeline","text":"Azure DevOps Multi-stage pipeline - Preview Minor Azure DevOps updates on mono-stage build pipeline Lodash integration for smaller builds Documentation update on continous integration Upgraded Libraries JEST Presets @voitanos/jest-preset-spfx - 1.2.2 @voitanos/jest-preset-spfx-react15 - 1.3.2 @voitanos/jest-preset-spfx-react16 - 1.3.2","title":"1.10.2 Lodash &amp; Azure DevOps Multi-stage pipeline"},{"location":"release-notes/#1101-better-unit-testing-reporting-and-pipeline-caching","text":"better unit test and coverage reporting integration with azure devops updated jest-junit dependency added dependencies caching switched to ubuntu agent for better performance Upgraded References sass-loader: 8.0.0 handlebars: 4.5.3 ts-loader: 6.2.1 vue-loader: 15.7.2 vie-property-decorator: 8.3.0 fork-ts-checker-webpack-plugin: 3.0.1","title":"1.10.1 Better unit testing reporting and pipeline caching"},{"location":"release-notes/#1100-handlebarsjs-webpack-loader-update","text":"Angular Bundle, link and Scaffolding fix #206 Updated VueJS Update Handlebars with improved partials and helper support Upgrade Handlebar Projects TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Suppor for library components is broken in @microsoft/generator-sharePoint. #195 , sp-dev-docs#4554 Includes Office UI Fabric - 5.x, 6.x, 6.x Fluent pnp/pnpjs - 1.3.5 pnp/spfx-property-controls - 1.16.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.5.1 Handlebars - 4.3.0 Vue - 2.6.10 Office 365 CLI - 1.23.0 StyleLint - 11.0.0","title":"1.10.0 HandlebarsJS - Webpack loader update"},{"location":"release-notes/#191-support-for-angular-8-added","text":"Angular Elements option supports now Angular 6/7 and 8 #199 fixed --skip-install not honored when pnpm gets used. TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Suppor tfor library components is broken in @microsoft/generator-sharePoint. #195 , sp-dev-docs#4554","title":"1.9.1 Support for Angular 8 added"},{"location":"release-notes/#190-update-to-spfx-191","text":"Upgrade to SPFx 1.9.1 Angular v6, v7 support added SPFx-uifabric-themes add-on added TypeScript support for 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5 Support for library component Includes Office UI Fabric - 5.x, 6.x, 6.x Fluent pnp/pnpjs - 1.3.5 pnp/spfx-property-controls - 1.16.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.4.1 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.23.0 StyleLint - 10.1.0","title":"1.9.0 Update to SPFx 1.9.1"},{"location":"release-notes/#181-azure-devops-update","text":"Azure DevOps CI integration use now NodeJS 10 CSSComb integration Includes pnp/pnpjs - 1.3.3 pnp/spfx-property-controls - 1.15.0 pnp/spfx-controls-react - 1.14.0 jQuery - 3.4.1 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.19.0 StyleLint - 10.1.0","title":"1.8.1 Azure DevOps update"},{"location":"release-notes/#180-azure-devops-and-jest-office-ui-fabric-support-typescript-version-selector","text":"Azure DevOps testing has been improved to support Jest testing. TypeScript selection for all SharePoint Online Projects Office UI Fabric integration including Fluent Design","title":"1.8.0 Azure DevOps and Jest, Office UI Fabric support, TypeScript version selector"},{"location":"release-notes/#173-spfx-base-generator-182-update","text":"Upgrade to @pnp/office365-cli 1.20.0","title":"1.7.3 SPFx base generator 1.8.2 update"},{"location":"release-notes/#172-spfx-base-generator-182-update","text":"Update to SPFx generator version 1.8.2 Dropped support for jQUery version 2 Includes jQuery - 3.4.1 pnp/pnpjs - 1.3.2 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.19.0","title":"1.7.2 SPFx base generator 1.8.2 update"},{"location":"release-notes/#171-spfx-base-generator-181-update","text":"Update to SPFx generator version 1.8.1 Updated References pnp/pnpjs - 1.3.2 webpack-bundle-analyzer - 3.3.2 Handlebars - 4.1.2 Vue - 2.6.10 Office 365 CLI - 1.17.0","title":"1.7.1 SPFx base generator 1.8.1 update"},{"location":"release-notes/#170-spfx-base-generator-180-update","text":"Update to SPFx generator version 1.8.0 Bugfix command line options for environment","title":"1.7.0 SPFx base generator 1.8.0 update"},{"location":"release-notes/#163-azure-devops","text":"Azure DevOps base integration added by Vincent Biret npm version - Updates package-solution.json and Teams manifest.json with package.json version gulp dev - for package solution for development Jest Testing Framework - is now optional #157 Docker Documentation Bugfix: #158 - Missing gulp-sequence in package.json Updates: @pnp/spfx-property-controls - 1.14.1 @pnp/spfx-controls-react - 1.12.0","title":"1.6.3 Azure Devops"},{"location":"release-notes/#162-update-of-the-project-creation-process","text":"Only supported options are available now #154 Feature Matrix in documentation updated Bugfix #150 Includes: @pnp/pnpjs - v1.2.9 @pnp/spfx-property-controls - v1.14.0 @pnp/@pnp/spfx-controls-react : v1.11.0","title":"1.6.2 Update of the project creation process"},{"location":"release-notes/#161-gulp-dist-jest-for-no-framework-project","text":"Jest testing framework support for 'No Framework' projects New \"gulp dist\" task for faster-creating builds for production ('clean', 'bundle', 'package-solution') Update package versions on VueJS, HandlbarsJS generator Includes: pnp/pnpjs: v1.2.7 @pnp/spfx-property-controls: v1.14.0 @pnp/spfx-controls-react: v1.11.0 Bugfix #147","title":"1.6.1 - 'gulp dist', Jest for no framework project"},{"location":"release-notes/#160-support-for-jest-webpack-bundle-analyser-and-stylelint","text":"All generator can have support: WebPack Bundle Analyser StyleLint pnp/pnpjs 1.2.8 ReactJS supports: JEST testing support","title":"1.6.0 - Support for Jest, Webpack Bundle Analyser and StyleLint"},{"location":"release-notes/#150-upgrade-to-version-microsoftgenerator-spfx-170","text":"Upgrade to @microsoft/sharepoint version 1.7 by Pawel Hawrylak Update Test definition for onprem19 - Application Customizer and Web Parts Updated for On-Premises Support SharePoint 2019 Added additional SharePoint 2019 tests domain isolation option added package update checker added","title":"1.5.0 - Upgrade to version @microsoft/generator-spfx 1.7.0"},{"location":"release-notes/#143-handlebarjs-gulp-updated","text":"Optimisation of Handlbar gulp task behaviour","title":"1.4.3 - Handlebarjs Gulp updated"},{"location":"release-notes/#142-angular-elements-browser-optimisation","text":"Polyfill and browser behaviour optimisation","title":"1.4.2 - Angular Elements - Browser optimisation"},{"location":"release-notes/#141-angular-element-bugfix","text":"Update on polyfill handling in various browsers","title":"1.4.1 - Angular Element - Bugfix"},{"location":"release-notes/#140-angular-generator-added","text":"New Framework added: Angular Elements Other updates Update Handlebar dependencies Version dependencies update for Addons generator Small fixes for Angular Elements generator Update Handlebar dependencies Version dependencies update for Addons generator Fix Kebab Case naming convention Fixed bug with project name in Angular Elements generator (#107) Update Maintainer email address Added guide for Angular Elements Update package-lock.json Update pnpsays.js","title":"1.4.0 - Angular Generator added"},{"location":"release-notes/#131-version-131-minor-bugfix-in-vuejs-generator","text":"Bug fixed described in issue #98","title":"1.3.1 - Version 1.3.1 - Minor bugfix in VueJS generator"},{"location":"release-notes/#130-integration-of-office-cli-for-version-check-and-test-bench-update","text":"Integration of Office CLI 365 for automated version check Implementation of new the test engine New Core Test Definition, Test Runner and Test Bench implemented Bugfix: Improvement file handling in gulp file Bugfix: #95 - Cannot find @microsoft/generator-sharepoint","title":"1.3.0 - Integration of Office CLI for Version Check and Test Bench update"},{"location":"release-notes/#12-vuejs-added","text":"New generator for VueJs - thanks to Alex Terentiev Structural generator change: All components are stored in the folder components . Bugfix for folder creation during project creation #84 Updates on utility class","title":"1.2 - VueJS added"},{"location":"release-notes/#11-reusable-controls-added","text":"Integration of Reusable React Controls for SharePoint Solutions Integration of Reusable Property Pane Controls for SharePoint Solutions","title":"1.1 - Reusable controls added"},{"location":"release-notes/#10-initial-release","text":"First generator release Yeoman generator for Handlebars","title":"1.0 - Initial release"},{"location":"usage/","text":"Standard gulp tasks \u00b6 build - Builds the client-side solution project. bundle - Bundles the client-side solution project entry point and all its dependencies into a single JavaScript file. serve - Serves the client-side solution project and assets from the local machine. clean - Cleans the client-side solution project's build artifacts from the previous build and from the build target directories (lib and dist). test - Runs unit tests, if available, for the client-side solution project. package-solution - Packages the client-side solution into a SharePoint package. deploy-azure-storage - Deploys client-side solution project assets to Azure Storage. Additional gulp tasks \u00b6 dist - Combines clean, bundle and package-solution (above) to package the solution for production dev - Combines clean, bundle and package-solution (above) to package the solution for development npm version \u00b6 ' npm version ' is a command that increases the version number in the package.json file. With this generator out of the box, using npm version will change the version in the following files: package.json config/package-solution.json teams/manifest.json (if applicable) To use npm version , you must have committed your changes - your working directory must be clean. If it isn't, you'll see an error like: npm ERR! Git working directory not clean. npm ERR! M config/package-solution.json ... Once you have committed all of your changes, you can run one of the following: npm version major Set a major version and upgrade the \u2018package.json\u2019 to v1.0.0, v2.0.0, \u2026 npm version minor Set a minor version and upgrade the \u2018package.json\u2019 to v1.1.0, v1.2.0, v1.3.0, \u2026 npm version patch Set a minor version and upgrade the \u2018package.json\u2019 to v1.1.1, v1.1.2, v1.1.3, \u2026 Note It is up to you to ensure that the versions all match before you run these commands. Otherwise, your version numbers may be inconsistent. If you'd like to customize what happens when you run npm version , you can add your customizations to the pre-version.js file in the tools directory. The current commit will also be tagged on the git repository. Info Additional information: npm-version - npm documentation git-tag - git documentation Use npm version to upgrade the version of your SPFx solution","title":"Usage"},{"location":"usage/#standard-gulp-tasks","text":"build - Builds the client-side solution project. bundle - Bundles the client-side solution project entry point and all its dependencies into a single JavaScript file. serve - Serves the client-side solution project and assets from the local machine. clean - Cleans the client-side solution project's build artifacts from the previous build and from the build target directories (lib and dist). test - Runs unit tests, if available, for the client-side solution project. package-solution - Packages the client-side solution into a SharePoint package. deploy-azure-storage - Deploys client-side solution project assets to Azure Storage.","title":"Standard gulp tasks"},{"location":"usage/#additional-gulp-tasks","text":"dist - Combines clean, bundle and package-solution (above) to package the solution for production dev - Combines clean, bundle and package-solution (above) to package the solution for development","title":"Additional gulp tasks"},{"location":"usage/#npm-version","text":"' npm version ' is a command that increases the version number in the package.json file. With this generator out of the box, using npm version will change the version in the following files: package.json config/package-solution.json teams/manifest.json (if applicable) To use npm version , you must have committed your changes - your working directory must be clean. If it isn't, you'll see an error like: npm ERR! Git working directory not clean. npm ERR! M config/package-solution.json ... Once you have committed all of your changes, you can run one of the following: npm version major Set a major version and upgrade the \u2018package.json\u2019 to v1.0.0, v2.0.0, \u2026 npm version minor Set a minor version and upgrade the \u2018package.json\u2019 to v1.1.0, v1.2.0, v1.3.0, \u2026 npm version patch Set a minor version and upgrade the \u2018package.json\u2019 to v1.1.1, v1.1.2, v1.1.3, \u2026 Note It is up to you to ensure that the versions all match before you run these commands. Otherwise, your version numbers may be inconsistent. If you'd like to customize what happens when you run npm version , you can add your customizations to the pre-version.js file in the tools directory. The current commit will also be tagged on the git repository. Info Additional information: npm-version - npm documentation git-tag - git documentation Use npm version to upgrade the version of your SPFx solution","title":"npm version"},{"location":"compose/","text":"Composing custom SPFx generators \u00b6 PnP SPFx Generator - Development \u00b6 Before you start development of a custom yeoman generator, please be sure to read Writing your own Yeoman Generator . The following sections explain the overall setup and considerations. Project Setup \u00b6 The following directory listing gives you an overview of the main directories in the generator: \u251c\u2500\u2500 app <-- Main Generator \u251c\u2500\u2500 docs <-- Documentation \u251c\u2500\u2500 generators <-- Custom Generators \u2502 \u251c\u2500\u2500 addons <-- Addon Generator reserved for client libraries only \u2502 \u251c\u2500\u2500 handlebars <-- PnP Handlebars generator \u251c\u2500\u2500 lib <-- General purpose libraries \u251c\u2500\u2500 test <-- Mocha Unit Tests \u251c\u2500\u2500 tools \u2502 \u251c\u2500\u2500 generator-template <-- Template yeoman generator Getting started writing a new generator \u00b6 To get started implementing and adding a new generator, copy the template folder in the generators folder and rename it to a meaningful name matching your framework. In the folder you will find the following files: index.js - main sub generator file promptconfig.js - special prompt config related to sub generator template/addonConfig.json - This file contains all NPM Packages that need to be installed User prompt for sub generator \u00b6 If your generator needs some additional information from the user, questions can be configured in the file promptconfig.js . The content of this file follows the default Yeoman generator user prompting described in the article Interacting with the User . The library Yeoman uses is Inquirer.js . \"use strict\" // These are just sample selection of options const options = [{ name : 'Option A' , value : 'option-a' }, { name : 'Option B' , value : 'option-b' } ]; const configOptions = [ // Sample content of questions { type : 'list' , message : 'Please add your options in here' , name : 'youroptions' , choices : options } // , addon ] const promptConfig = { config : configOptions } module . exports = promptConfig ; This example exports the configuration as a module and can be integrated in the main Yeoman generator to consolidate the user prompts in the main generator. Generator implementation - index.js \u00b6 All actions required for a new custom generator need to be implemented in the index.js file. The default template currently lists all possible methods in the correct call order provided by the default Yeoman generator: // Base Yeoman generator const Generator = require ( 'yeoman-generator' ); // prompt configuration const prompts = require ( './promptConfig' ); module . exports = class extends Generator { constructor ( args , opts ) { super ( args , opts ); // configuration of user prompt } // Initialisation geenerator initializing () { } // Prompt for user input for Custom Generator prompting () { } // adds additonal editor support in this case CSS Comb configuring () { // Currently not supported - Don't use this } // adds additonal editor support in this case CSS Comb writing () { // Currently not supported - Don't use this } // adds additonal editor support in this case CSS Comb install () { /** * Place your custom deployment code in here */ } // Run installer normally time to say goodbye // If yarn is installed yarn will be used end () { } } The call order of a Yeoman generator is defined in the following steps: constructor() initializing() prompting() configuring() writing() install() end() Because of the dependency on the Microsoft Yeoman Generator, the actions need to be delayed to the next step. After the SPFx generator has written the files to the file system through its writing() method, the custom generator is able to update the configuration with additional information. Instead of adding the code of the custom generator to the writing() method, the code has to be added to the install() method. In the case of the Handlebars generator, the following functions get called in the install() method: install () { // deploy additional files to the project directory this . _deployFiles (); // add externals to the configuration this . _addExternals (); // add all package depenedencies configured in addonConfig.json. this . _addPackageDependencies (); // inject custom tasks to gulpfile this . _injectToGulpFile (); // finally run install util . runInstall ( this ); } This is required because all additional tasks have to be performed on top of the assets deployed by the SPFx default assets. Further reading: How to implement prompting","title":"General"},{"location":"compose/#composing-custom-spfx-generators","text":"","title":"Composing custom SPFx generators"},{"location":"compose/#pnp-spfx-generator-development","text":"Before you start development of a custom yeoman generator, please be sure to read Writing your own Yeoman Generator . The following sections explain the overall setup and considerations.","title":"PnP SPFx Generator - Development"},{"location":"compose/#project-setup","text":"The following directory listing gives you an overview of the main directories in the generator: \u251c\u2500\u2500 app <-- Main Generator \u251c\u2500\u2500 docs <-- Documentation \u251c\u2500\u2500 generators <-- Custom Generators \u2502 \u251c\u2500\u2500 addons <-- Addon Generator reserved for client libraries only \u2502 \u251c\u2500\u2500 handlebars <-- PnP Handlebars generator \u251c\u2500\u2500 lib <-- General purpose libraries \u251c\u2500\u2500 test <-- Mocha Unit Tests \u251c\u2500\u2500 tools \u2502 \u251c\u2500\u2500 generator-template <-- Template yeoman generator","title":"Project Setup"},{"location":"compose/#getting-started-writing-a-new-generator","text":"To get started implementing and adding a new generator, copy the template folder in the generators folder and rename it to a meaningful name matching your framework. In the folder you will find the following files: index.js - main sub generator file promptconfig.js - special prompt config related to sub generator template/addonConfig.json - This file contains all NPM Packages that need to be installed","title":"Getting started writing a new generator"},{"location":"compose/#user-prompt-for-sub-generator","text":"If your generator needs some additional information from the user, questions can be configured in the file promptconfig.js . The content of this file follows the default Yeoman generator user prompting described in the article Interacting with the User . The library Yeoman uses is Inquirer.js . \"use strict\" // These are just sample selection of options const options = [{ name : 'Option A' , value : 'option-a' }, { name : 'Option B' , value : 'option-b' } ]; const configOptions = [ // Sample content of questions { type : 'list' , message : 'Please add your options in here' , name : 'youroptions' , choices : options } // , addon ] const promptConfig = { config : configOptions } module . exports = promptConfig ; This example exports the configuration as a module and can be integrated in the main Yeoman generator to consolidate the user prompts in the main generator.","title":"User prompt for sub generator"},{"location":"compose/#generator-implementation-indexjs","text":"All actions required for a new custom generator need to be implemented in the index.js file. The default template currently lists all possible methods in the correct call order provided by the default Yeoman generator: // Base Yeoman generator const Generator = require ( 'yeoman-generator' ); // prompt configuration const prompts = require ( './promptConfig' ); module . exports = class extends Generator { constructor ( args , opts ) { super ( args , opts ); // configuration of user prompt } // Initialisation geenerator initializing () { } // Prompt for user input for Custom Generator prompting () { } // adds additonal editor support in this case CSS Comb configuring () { // Currently not supported - Don't use this } // adds additonal editor support in this case CSS Comb writing () { // Currently not supported - Don't use this } // adds additonal editor support in this case CSS Comb install () { /** * Place your custom deployment code in here */ } // Run installer normally time to say goodbye // If yarn is installed yarn will be used end () { } } The call order of a Yeoman generator is defined in the following steps: constructor() initializing() prompting() configuring() writing() install() end() Because of the dependency on the Microsoft Yeoman Generator, the actions need to be delayed to the next step. After the SPFx generator has written the files to the file system through its writing() method, the custom generator is able to update the configuration with additional information. Instead of adding the code of the custom generator to the writing() method, the code has to be added to the install() method. In the case of the Handlebars generator, the following functions get called in the install() method: install () { // deploy additional files to the project directory this . _deployFiles (); // add externals to the configuration this . _addExternals (); // add all package depenedencies configured in addonConfig.json. this . _addPackageDependencies (); // inject custom tasks to gulpfile this . _injectToGulpFile (); // finally run install util . runInstall ( this ); } This is required because all additional tasks have to be performed on top of the assets deployed by the SPFx default assets. Further reading: How to implement prompting","title":"Generator implementation - index.js"},{"location":"compose/add-addons/","text":"Add custom Addon dependencies \u00b6 Applies to: generators/addons If you would just like to integrate custom client-side dependencies, there is no need to write your own generator. This can just be included directly in the addon generator. Add npm dependencies \u00b6 The dependency configuration of additional addons is located in generators/addons/templates and is named addonConfig.json. In this JSON file you can include additional configurations for various NPM packages. { \"jquery@2\" : { \"dependencies\" : { \"jquery\" : \"^2.2.4\" , \"@types/jquery\" : \"^2.0.49\" } }, \"jquery@3\" : { \"dependencies\" : { \"jquery\" : \"^3.0.0\" , \"@types/jquery\" : \"^3.0.0\" } }, \"pnpjs\" : { \"dependencies\" : { \"@pnp/pnpjs\" : \"^1.1.1\" } } } To add a custom library add a new property in the form of: \"yourcustomlibrary@2\" : { // <custom library name>@<major version label> \"dependencies\" : { // \"dependencies\" or \"devDependencies\" \"firstdependency\" : \"^1.0.0\" , // library named first dependecy, \"@types/firstdependency\" : \"^1.0.0\" , // types for first dependecy // .. any additional library } } The updated addonConfiguration.json file then might look like this: { \"jquery@2\" : { \"dependencies\" : { \"jquery\" : \"^2.2.4\" , \"@types/jquery\" : \"^2.0.49\" } }, \"jquery@3\" : { \"dependencies\" : { \"jquery\" : \"^3.0.0\" , \"@types/jquery\" : \"^3.0.0\" } }, \"pnpjs\" : { \"dependencies\" : { \"@pnp/pnpjs\" : \"^1.1.1\" } }, \"yourcustomlibrary@2\" : { \"dependencies\" : { \"firstdependency\" : \"^1.0.0\" , \"@types/firstdependency\" : \"^1.0.0\" } } } DO NOT use comments in JSON files - This causes the files to be invalid Integrate the new library in prompting \u00b6 To ask the user to include this new library open the promptConfig.js file in the addon generator. In the config options add a reference to the new library: ... const configOptions = [ // Library selection { type : 'checkbox' , message : 'Which libraries to include' , name : 'jsLibrary' , choices : [{ name : 'jQuery' , value : 'jquery' }, { name : 'pnpjs' , value : '@pnp/pnpjs' }, // New reference { name : 'New awesome library to include' , value : 'yourcustomlibrary@2' } ] }, // jQuery version selection { type : 'list' , message : ` ${ chalk . bold . yellow ( 'jQuery: ' ) } Please choose a version:` , name : 'jQueryVersion' , choices : jqueryOptions , when : answers => answers . jsLibrary . indexOf ( 'jquery' ) !== - 1 } ] module . exports = configOptions ; The name of the new reference can be set to any descriptive text but the value must match the property name used in the addonConfig.json . The selection of this dialog gets picked up automatically during the provisioning process and will be added to the package.json option. The same method can be used to inject dependencies on custom generators too.","title":"Dependencies for addons"},{"location":"compose/add-addons/#add-custom-addon-dependencies","text":"Applies to: generators/addons If you would just like to integrate custom client-side dependencies, there is no need to write your own generator. This can just be included directly in the addon generator.","title":"Add custom Addon dependencies"},{"location":"compose/add-addons/#add-npm-dependencies","text":"The dependency configuration of additional addons is located in generators/addons/templates and is named addonConfig.json. In this JSON file you can include additional configurations for various NPM packages. { \"jquery@2\" : { \"dependencies\" : { \"jquery\" : \"^2.2.4\" , \"@types/jquery\" : \"^2.0.49\" } }, \"jquery@3\" : { \"dependencies\" : { \"jquery\" : \"^3.0.0\" , \"@types/jquery\" : \"^3.0.0\" } }, \"pnpjs\" : { \"dependencies\" : { \"@pnp/pnpjs\" : \"^1.1.1\" } } } To add a custom library add a new property in the form of: \"yourcustomlibrary@2\" : { // <custom library name>@<major version label> \"dependencies\" : { // \"dependencies\" or \"devDependencies\" \"firstdependency\" : \"^1.0.0\" , // library named first dependecy, \"@types/firstdependency\" : \"^1.0.0\" , // types for first dependecy // .. any additional library } } The updated addonConfiguration.json file then might look like this: { \"jquery@2\" : { \"dependencies\" : { \"jquery\" : \"^2.2.4\" , \"@types/jquery\" : \"^2.0.49\" } }, \"jquery@3\" : { \"dependencies\" : { \"jquery\" : \"^3.0.0\" , \"@types/jquery\" : \"^3.0.0\" } }, \"pnpjs\" : { \"dependencies\" : { \"@pnp/pnpjs\" : \"^1.1.1\" } }, \"yourcustomlibrary@2\" : { \"dependencies\" : { \"firstdependency\" : \"^1.0.0\" , \"@types/firstdependency\" : \"^1.0.0\" } } } DO NOT use comments in JSON files - This causes the files to be invalid","title":"Add npm dependencies"},{"location":"compose/add-addons/#integrate-the-new-library-in-prompting","text":"To ask the user to include this new library open the promptConfig.js file in the addon generator. In the config options add a reference to the new library: ... const configOptions = [ // Library selection { type : 'checkbox' , message : 'Which libraries to include' , name : 'jsLibrary' , choices : [{ name : 'jQuery' , value : 'jquery' }, { name : 'pnpjs' , value : '@pnp/pnpjs' }, // New reference { name : 'New awesome library to include' , value : 'yourcustomlibrary@2' } ] }, // jQuery version selection { type : 'list' , message : ` ${ chalk . bold . yellow ( 'jQuery: ' ) } Please choose a version:` , name : 'jQueryVersion' , choices : jqueryOptions , when : answers => answers . jsLibrary . indexOf ( 'jquery' ) !== - 1 } ] module . exports = configOptions ; The name of the new reference can be set to any descriptive text but the value must match the property name used in the addonConfig.json . The selection of this dialog gets picked up automatically during the provisioning process and will be added to the package.json option. The same method can be used to inject dependencies on custom generators too.","title":"Integrate the new library in prompting"},{"location":"compose/add-generator/","text":"Step-by-Step Custom generator \u00b6 This sample provides a ste","title":"Step-by-Step Custom generator"},{"location":"compose/add-generator/#step-by-step-custom-generator","text":"This sample provides a ste","title":"Step-by-Step Custom generator"},{"location":"compose/custgen-dependencies/","text":"Inject dependencies using your custom generator \u00b6 It is possible to inject dependencies into the generated project using your custom generator. The sub generator for Handlebars, for example, does this. A config file for all required npm packages to include can be found in this generator: { \"handlebars\" : { \"dependencies\" : { \"handlebars\" : \"^4.0.6\" }, \"devDependencies\" : { \"handlebars-template-loader\" : \"^1.0.0\" , \"@types/handlebars\" : \"^4.0.39\" } } } The addonConfig.json in the handlebar generator contains all required dependencies. Those npm packages that are required during runtime and those required during development. To inject those dependecies to the generated package.json , call the following method in your generator code. _addPackageDependencies () { if ( fs . existsSync ( this . destinationPath ( 'package.json' ))) { // request the default package file let config ; try { config = JSON . parse ( fs . readFileSync ( this . destinationPath ( 'package.json' ) )); } catch ( error ) { throw error ; } // request current addon configuration let addonConfig ; try { addonConfig = JSON . parse ( fs . readFileSync ( this . templatePath ( 'addonConfig.json' ) ) ) } catch ( err ) { throw err ; } // select the requested libraries let requestedLibraries = [ 'handlebars' ]; // declare new package config file let newPkgConfig ; try { newPkgConfig = util . mergeAddons ( addonConfig , requestedLibraries , config ); } catch ( error ) { throw error } // if content could be added to the new package.json write it if ( newPkgConfig !== undefined && newPkgConfig !== null ) { fs . writeFileSync ( this . destinationPath ( 'package.json' ), JSON . stringify ( newPkgConfig , null , 2 ) ); } else { throw 'Updated package.json file is invalid.' ; } } } For the requested libraries parameter, pass in an array of identifiers stored in your addon configuration. In the case of the handlebar generator this is just 'handlebars': let requestedLibraries = [ 'handlebars' ]; You can have multiple identifiers in this array. Remark \u00b6 It is possible to inject additional dependencies by calling npm install from the generator directly. In case of multiple runs there may be delays and conflicts for the injection and is even slower than adding it directly in the package.json files. How to include version numbers? Make sure you don't have a fixed number included in your package versions. Make sure you include '^' in front of the version number. This makes sure that the latest version in that version branch will be used. More on caret ranges can be found it the official npm documentation.","title":"Inject dependencies"},{"location":"compose/custgen-dependencies/#inject-dependencies-using-your-custom-generator","text":"It is possible to inject dependencies into the generated project using your custom generator. The sub generator for Handlebars, for example, does this. A config file for all required npm packages to include can be found in this generator: { \"handlebars\" : { \"dependencies\" : { \"handlebars\" : \"^4.0.6\" }, \"devDependencies\" : { \"handlebars-template-loader\" : \"^1.0.0\" , \"@types/handlebars\" : \"^4.0.39\" } } } The addonConfig.json in the handlebar generator contains all required dependencies. Those npm packages that are required during runtime and those required during development. To inject those dependecies to the generated package.json , call the following method in your generator code. _addPackageDependencies () { if ( fs . existsSync ( this . destinationPath ( 'package.json' ))) { // request the default package file let config ; try { config = JSON . parse ( fs . readFileSync ( this . destinationPath ( 'package.json' ) )); } catch ( error ) { throw error ; } // request current addon configuration let addonConfig ; try { addonConfig = JSON . parse ( fs . readFileSync ( this . templatePath ( 'addonConfig.json' ) ) ) } catch ( err ) { throw err ; } // select the requested libraries let requestedLibraries = [ 'handlebars' ]; // declare new package config file let newPkgConfig ; try { newPkgConfig = util . mergeAddons ( addonConfig , requestedLibraries , config ); } catch ( error ) { throw error } // if content could be added to the new package.json write it if ( newPkgConfig !== undefined && newPkgConfig !== null ) { fs . writeFileSync ( this . destinationPath ( 'package.json' ), JSON . stringify ( newPkgConfig , null , 2 ) ); } else { throw 'Updated package.json file is invalid.' ; } } } For the requested libraries parameter, pass in an array of identifiers stored in your addon configuration. In the case of the handlebar generator this is just 'handlebars': let requestedLibraries = [ 'handlebars' ]; You can have multiple identifiers in this array.","title":"Inject dependencies using your custom generator"},{"location":"compose/custgen-dependencies/#remark","text":"It is possible to inject additional dependencies by calling npm install from the generator directly. In case of multiple runs there may be delays and conflicts for the injection and is even slower than adding it directly in the package.json files. How to include version numbers? Make sure you don't have a fixed number included in your package versions. Make sure you include '^' in front of the version number. This makes sure that the latest version in that version branch will be used. More on caret ranges can be found it the official npm documentation.","title":"Remark"},{"location":"compose/prompting/","text":"How to implement prompting \u00b6 Yeoman generator use a library named Inquirer.js for the prompt configuration. To read more on the general prompting behaviour checkout Interacting with the User in the Yeoman documentation. To support multiple Yeoman generators with different prompting configurations, a special method was implemented in the core generators such as the addon generator. generators/addons \u251c\u2500\u2500 index.js \u251c\u2500\u2500 promptConfig.js # <- this is the configuration file for the prompts \u2514\u2500\u2500 templates \u2514\u2500\u2500 addonConfig.json All prompts required by the generator are included in the prompt config file directly inside the Yeoman generator. const chalk = require ( 'chalk' ); const jqueryOptions = [{ 'name' : '3.x.x (recommended)' , 'value' : 3 }, { 'name' : '2.x.x' , 'value' : 2 } ] const configOptions = [ // Library selection { type : 'checkbox' , message : 'Which libraries to include' , name : 'jsLibrary' , choices : [{ name : 'jQuery' , value : 'jquery' }, { name : 'pnpjs' , value : '@pnp/pnpjs' }] }, // jQuery version selection { type : 'list' , message : ` ${ chalk . bold . yellow ( 'jQuery: ' ) } Please choose a version:` , name : 'jQueryVersion' , choices : jqueryOptions , when : answers => answers . jsLibrary . indexOf ( 'jquery' ) !== - 1 } ] module . exports = configOptions ; This example defines the questions for jQuery when used in the PnP SPFx generator and will be exported as a module in node. This is required because all configuration options will then be collected together in the main generator and is located in the /app folder. Inside this folder is another promptConfig and the particular configuration of the addon generator prompting gets imported. // Add configuration of Addon generator const addon = require ( '../generators/addons/promptConfig' ); configOptions = configOptions . concat ( addon ); const promptConfig = { config : configOptions } module . exports = promptConfig ; This code imports the module of the addon configuraton and adds the settings to the default generator prompting. This config file will again be exported as a module and gets used in the main generator code. prompting () { /* DO NOT ENTER CODE HERE */ this . prompt ( prompting . config ) . then ( answers => { // Choose appro this . options . SpfxOptions [ 'framework' ] = this . _evalSPFxGenerator ( answers . framework ); this . options . pnpFramework = answers . framework ; this . options . libraries = this . _evalAddons ( answers ); this . options . SPFxFramework = answers . framework ; this . _configGenerators ( this . options ); }); } So this makes sure that all prompt configurations can be centrally managed - even the ones specific to additional generators. Info If your custom generator has a special promting configuration, please add a comment in your Pull Request saying so","title":"Prompting"},{"location":"compose/prompting/#how-to-implement-prompting","text":"Yeoman generator use a library named Inquirer.js for the prompt configuration. To read more on the general prompting behaviour checkout Interacting with the User in the Yeoman documentation. To support multiple Yeoman generators with different prompting configurations, a special method was implemented in the core generators such as the addon generator. generators/addons \u251c\u2500\u2500 index.js \u251c\u2500\u2500 promptConfig.js # <- this is the configuration file for the prompts \u2514\u2500\u2500 templates \u2514\u2500\u2500 addonConfig.json All prompts required by the generator are included in the prompt config file directly inside the Yeoman generator. const chalk = require ( 'chalk' ); const jqueryOptions = [{ 'name' : '3.x.x (recommended)' , 'value' : 3 }, { 'name' : '2.x.x' , 'value' : 2 } ] const configOptions = [ // Library selection { type : 'checkbox' , message : 'Which libraries to include' , name : 'jsLibrary' , choices : [{ name : 'jQuery' , value : 'jquery' }, { name : 'pnpjs' , value : '@pnp/pnpjs' }] }, // jQuery version selection { type : 'list' , message : ` ${ chalk . bold . yellow ( 'jQuery: ' ) } Please choose a version:` , name : 'jQueryVersion' , choices : jqueryOptions , when : answers => answers . jsLibrary . indexOf ( 'jquery' ) !== - 1 } ] module . exports = configOptions ; This example defines the questions for jQuery when used in the PnP SPFx generator and will be exported as a module in node. This is required because all configuration options will then be collected together in the main generator and is located in the /app folder. Inside this folder is another promptConfig and the particular configuration of the addon generator prompting gets imported. // Add configuration of Addon generator const addon = require ( '../generators/addons/promptConfig' ); configOptions = configOptions . concat ( addon ); const promptConfig = { config : configOptions } module . exports = promptConfig ; This code imports the module of the addon configuraton and adds the settings to the default generator prompting. This config file will again be exported as a module and gets used in the main generator code. prompting () { /* DO NOT ENTER CODE HERE */ this . prompt ( prompting . config ) . then ( answers => { // Choose appro this . options . SpfxOptions [ 'framework' ] = this . _evalSPFxGenerator ( answers . framework ); this . options . pnpFramework = answers . framework ; this . options . libraries = this . _evalAddons ( answers ); this . options . SPFxFramework = answers . framework ; this . _configGenerators ( this . options ); }); } So this makes sure that all prompt configurations can be centrally managed - even the ones specific to additional generators. Info If your custom generator has a special promting configuration, please add a comment in your Pull Request saying so","title":"How to implement prompting"},{"location":"howtos/","text":"How To \u00b6 This section contains all the important information about how to work with the projects generated by this Yeoman Generator. Angular Elements Aurelia Continuous Integration Use Docker with SPFx Upgrade guide \u00b6 Upgrade Handlebars for greater than pnp/spfx 1.10.0","title":"How Tos"},{"location":"howtos/#how-to","text":"This section contains all the important information about how to work with the projects generated by this Yeoman Generator. Angular Elements Aurelia Continuous Integration Use Docker with SPFx","title":"How To"},{"location":"howtos/#upgrade-guide","text":"Upgrade Handlebars for greater than pnp/spfx 1.10.0","title":"Upgrade guide"},{"location":"howtos/angularelements/","text":"Angular Elements \u00b6 Prerequisites \u00b6 Before you can create new Angular Elements project you need to have @pnp/generator-spfx and @angular/cli packages installed globally. If you use npm, you can install them using following command in command prompt: npm install -g @pnp/generator-spfx @angular/cli Note Since version 1.9.0 it supports Angular version 6 and Angular version 7 (Ivy render engine is the default option) Note If the Angular CLI is not installed Angular option is disabled. Getting started \u00b6 To create new Angular Elements project: In your new project folder start SPFx PnP Generator using following command: yo @pnp/spfx Choose Angular Elements as framework in interactive prompt. Provide options for generator e.g. you can provide your own parameters to Angular CLI ng new command that is used to create new Angular project. Wait for creation of projects and installation of dependencies. Development \u00b6 Angular Elements generator creates separate SPFx and Angular projects. This allows you to use Angular CLI in development. SPFx project folder is created with -spfx suffix. Output generated from Angular is bundled and imported in SPFx Web Part. To build Angular project and bundle it in single file you should use npm run bundle command in Angular project folder. To build SPFx project, you can just use default gulp bundle --ship and gulp package-solution --ship commands in SPFx project folder. You can test your solution in SPFx Workbench using default gulp serve command in SPFx project folder or in Angular Dev Server using npm run start command in Angular project folder. Live Demo \u00b6","title":"Angular Elements"},{"location":"howtos/angularelements/#angular-elements","text":"","title":"Angular Elements"},{"location":"howtos/angularelements/#prerequisites","text":"Before you can create new Angular Elements project you need to have @pnp/generator-spfx and @angular/cli packages installed globally. If you use npm, you can install them using following command in command prompt: npm install -g @pnp/generator-spfx @angular/cli Note Since version 1.9.0 it supports Angular version 6 and Angular version 7 (Ivy render engine is the default option) Note If the Angular CLI is not installed Angular option is disabled.","title":"Prerequisites"},{"location":"howtos/angularelements/#getting-started","text":"To create new Angular Elements project: In your new project folder start SPFx PnP Generator using following command: yo @pnp/spfx Choose Angular Elements as framework in interactive prompt. Provide options for generator e.g. you can provide your own parameters to Angular CLI ng new command that is used to create new Angular project. Wait for creation of projects and installation of dependencies.","title":"Getting started"},{"location":"howtos/angularelements/#development","text":"Angular Elements generator creates separate SPFx and Angular projects. This allows you to use Angular CLI in development. SPFx project folder is created with -spfx suffix. Output generated from Angular is bundled and imported in SPFx Web Part. To build Angular project and bundle it in single file you should use npm run bundle command in Angular project folder. To build SPFx project, you can just use default gulp bundle --ship and gulp package-solution --ship commands in SPFx project folder. You can test your solution in SPFx Workbench using default gulp serve command in SPFx project folder or in Angular Dev Server using npm run start command in Angular project folder.","title":"Development"},{"location":"howtos/angularelements/#live-demo","text":"","title":"Live Demo"},{"location":"howtos/aurelia/","text":"Aurelia \u00b6 Getting started \u00b6 All your knowledge about Aurelia development still applies here. To learn more, head over to the official site. Aurelia.io To create new Aurelia project: In your new project folder start SPFx PnP Generator using following command: yo @pnp/spfx Choose SharePoint Online or SharePoint 2019 Choose Aurelia as your framework. Add libraries you need. Select TypeScript version Select vetting options Select pipeline configuration Enter the rest of the required information and wait for creation of projects and installation of dependencies. Development \u00b6 The Aurelia generator adds code to the WebPart.ts file to bootstrap the Aurelia component. It also adds a components directory with the Aurelia-component. Read the comments in the .ts files to get more details. In the components directory add Aurelia components as you would in any normal Aurelia project. There is no magic with the components directory, it is just for structure and order. The gulp file is updated to change how Webpack builds the project. To build SPFx project, you can just use default gulp bundle --ship and gulp package-solution --ship commands in SPFx project folder. You can test your solution in SPFx Workbench using default gulp serve command in SPFx project folder. The gulp file \u00b6 The gulp file contains the Webpack configuration. Unless you have specific requirements you should not need to change it. If you want to make youe bundle mean and lean, check out the options for Aurelia Webpack plugin here: https://github.com/aurelia/webpack-plugin/wiki","title":"Aurelia"},{"location":"howtos/aurelia/#aurelia","text":"","title":"Aurelia"},{"location":"howtos/aurelia/#getting-started","text":"All your knowledge about Aurelia development still applies here. To learn more, head over to the official site. Aurelia.io To create new Aurelia project: In your new project folder start SPFx PnP Generator using following command: yo @pnp/spfx Choose SharePoint Online or SharePoint 2019 Choose Aurelia as your framework. Add libraries you need. Select TypeScript version Select vetting options Select pipeline configuration Enter the rest of the required information and wait for creation of projects and installation of dependencies.","title":"Getting started"},{"location":"howtos/aurelia/#development","text":"The Aurelia generator adds code to the WebPart.ts file to bootstrap the Aurelia component. It also adds a components directory with the Aurelia-component. Read the comments in the .ts files to get more details. In the components directory add Aurelia components as you would in any normal Aurelia project. There is no magic with the components directory, it is just for structure and order. The gulp file is updated to change how Webpack builds the project. To build SPFx project, you can just use default gulp bundle --ship and gulp package-solution --ship commands in SPFx project folder. You can test your solution in SPFx Workbench using default gulp serve command in SPFx project folder.","title":"Development"},{"location":"howtos/aurelia/#the-gulp-file","text":"The gulp file contains the Webpack configuration. Unless you have specific requirements you should not need to change it. If you want to make youe bundle mean and lean, check out the options for Aurelia Webpack plugin here: https://github.com/aurelia/webpack-plugin/wiki","title":"The gulp file"},{"location":"howtos/continuousintegration/","text":"Continuous Integration \u00b6 The generator is able to provide build definitions for continuous integration. List of the pipeline technologies currently supported: - Azure DevOps (integrated with KarmaJS for test coverage) Azure DevOps \u00b6 The build definition included with your project configures the equivalent of the \"Continuous Integration\" of the official documentation . Once your yaml definition file is committed and pushed, you will see a \"name of your repository - CI\" build definition appear under the same team project. If you want to set up automated deployments of your solution, you can then follow the \"Continuous Deployment\" section of the official documentation . Simply select the new build definition and update the paths to match the artifact name. Upgrading from the single stage to the multi-stage pipeline infrastructure \u00b6 Multi-stage pipelines are a preview feature on Azure DevOps that allow you to describe other stages in addition to the build stage directly in your YAML pipeline definition. A good practice to ease maintenance and reusability of stages is to leverage templates instead of defining the stage right in the main pipeline file. Pre-reqs: \u00b6 Make sure you enable the preview feature called Multi-stage pipelines Steps \u00b6 Update the generator. Scaffold a new project: Select the multi-stage pipeline option on the CI question Copy the following files to your existing repository: azure-pipelines.yml azure-pipelines-deploy-template.yml azure-pipelines-build-template.yml Create a Variable group named qa_configuration containing the values described in the deploy template for the deployment stage. Commit and push the changed files Run the pipeline to update the configuration. Upgrading from the KarmaJS infrastructure \u00b6 Pre-reqs: \u00b6 You have previously upgraded your project to SPFx 1.8.0, if this is not done already, checkout the dedicated Office 365 CLI command Steps \u00b6 Run the following commands in your shell. Shell npm un @types/chai-as-promised chai-as-promised karma-junit-reporter -D npm i jest-junit jest @voitanos/jest-preset-spfx-react16 -D rm ./config/karma.conf.js in package.json add/update the following scripts. JSON \"test\": \"./node_modules/.bin/jest --config ./config/jest.config.json\", \"test:watch\": \"./node_modules/.bin/jest --config ./config/jest.config.json --watchAll\" Add a config/jest.config.json file with the following content. JSON { \"preset\": \"@voitanos/jest-preset-spfx-react16\", \"rootDir\": \"../src\", \"coverageReporters\": [ \"text\", \"json\", \"lcov\", \"text-summary\", \"cobertura\" ], \"reporters\": [ \"default\", [\"jest-junit\", { \"suiteName\": \"jest tests\", \"outputDirectory\": \"temp/test/junit\", \"outputName\": \"junit.xml\" }] ] } In gulpfile.js remove the following lines JS var buildConfig = build.getConfig(); var karmaTaskCandidates = buildConfig.uniqueTasks.filter((t) => t.name === 'karma'); if(karmaTaskCandidates && karmaTaskCandidates.length > 0) { var karmaTask = karmaTaskCandidates[0]; karmaTask.taskConfig.configPath = './config/karma.config.js'; } Update your azure-pipelines.yml to match the following sample .","title":"Continuous Integration"},{"location":"howtos/continuousintegration/#continuous-integration","text":"The generator is able to provide build definitions for continuous integration. List of the pipeline technologies currently supported: - Azure DevOps (integrated with KarmaJS for test coverage)","title":"Continuous Integration"},{"location":"howtos/continuousintegration/#azure-devops","text":"The build definition included with your project configures the equivalent of the \"Continuous Integration\" of the official documentation . Once your yaml definition file is committed and pushed, you will see a \"name of your repository - CI\" build definition appear under the same team project. If you want to set up automated deployments of your solution, you can then follow the \"Continuous Deployment\" section of the official documentation . Simply select the new build definition and update the paths to match the artifact name.","title":"Azure DevOps"},{"location":"howtos/continuousintegration/#upgrading-from-the-single-stage-to-the-multi-stage-pipeline-infrastructure","text":"Multi-stage pipelines are a preview feature on Azure DevOps that allow you to describe other stages in addition to the build stage directly in your YAML pipeline definition. A good practice to ease maintenance and reusability of stages is to leverage templates instead of defining the stage right in the main pipeline file.","title":"Upgrading from the single stage to the multi-stage pipeline infrastructure"},{"location":"howtos/continuousintegration/#pre-reqs","text":"Make sure you enable the preview feature called Multi-stage pipelines","title":"Pre-reqs:"},{"location":"howtos/continuousintegration/#steps","text":"Update the generator. Scaffold a new project: Select the multi-stage pipeline option on the CI question Copy the following files to your existing repository: azure-pipelines.yml azure-pipelines-deploy-template.yml azure-pipelines-build-template.yml Create a Variable group named qa_configuration containing the values described in the deploy template for the deployment stage. Commit and push the changed files Run the pipeline to update the configuration.","title":"Steps"},{"location":"howtos/continuousintegration/#upgrading-from-the-karmajs-infrastructure","text":"","title":"Upgrading from the KarmaJS infrastructure"},{"location":"howtos/continuousintegration/#pre-reqs_1","text":"You have previously upgraded your project to SPFx 1.8.0, if this is not done already, checkout the dedicated Office 365 CLI command","title":"Pre-reqs:"},{"location":"howtos/continuousintegration/#steps_1","text":"Run the following commands in your shell. Shell npm un @types/chai-as-promised chai-as-promised karma-junit-reporter -D npm i jest-junit jest @voitanos/jest-preset-spfx-react16 -D rm ./config/karma.conf.js in package.json add/update the following scripts. JSON \"test\": \"./node_modules/.bin/jest --config ./config/jest.config.json\", \"test:watch\": \"./node_modules/.bin/jest --config ./config/jest.config.json --watchAll\" Add a config/jest.config.json file with the following content. JSON { \"preset\": \"@voitanos/jest-preset-spfx-react16\", \"rootDir\": \"../src\", \"coverageReporters\": [ \"text\", \"json\", \"lcov\", \"text-summary\", \"cobertura\" ], \"reporters\": [ \"default\", [\"jest-junit\", { \"suiteName\": \"jest tests\", \"outputDirectory\": \"temp/test/junit\", \"outputName\": \"junit.xml\" }] ] } In gulpfile.js remove the following lines JS var buildConfig = build.getConfig(); var karmaTaskCandidates = buildConfig.uniqueTasks.filter((t) => t.name === 'karma'); if(karmaTaskCandidates && karmaTaskCandidates.length > 0) { var karmaTask = karmaTaskCandidates[0]; karmaTask.taskConfig.configPath = './config/karma.config.js'; } Update your azure-pipelines.yml to match the following sample .","title":"Steps"},{"location":"howtos/dockerimg/","text":"How to use Docker with @pnp/spfx generator \u00b6 The following definiton of a Docker file can be used to run @pnp/generator-spfx in Docker. Create a folder for your Docker file \u00b6 Create a folder on your hard drive and add a file named 'Dockerfile'. FROM node:8.12.0 EXPOSE 5432 4321 35729 RUN npm i -g gulp@3 yo @pnp/generator-spfx@latest --unsafe-perm VOLUME /usr/app/spfx WORKDIR /usr/app/spfx RUN useradd --create-home --shell /bin/bash spfx && \\ chown -R spfx:spfx /usr/app/spfx USER spfx CMD /bin/bash Build the image \u00b6 The following command creates a persitent container for pnp/spfx. It allows you to start the image faster from any spfx container on your hard drive. To build the docker image execute the form of command: docker build -t <imagename>:<tag> . For example a pnpspfx generator version 1.6.2 could be built and tagged like this. docker build -t pnpspfx:v162 . After the completion of this command the image can be verified with the following command. docker image ls The returned output should look similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE pnpspfx v162 9813ce7b5769 About an hour ago 871MB node 8.12.0 ce426dead114 3 months ago 670MB Run Docker image \u00b6 To run the docker image the following command start the image. docker run -h pnpspfx --name pnpspfx -it -p 5432:5432 -p 4321:4321 -p 35729:35729 pnpspfx:v162 This will open the shell of the docker container. In there the generator can now create a project for example through yo @pnp/spfx .","title":"How to use Docker with @pnp/spfx generator"},{"location":"howtos/dockerimg/#how-to-use-docker-with-pnpspfx-generator","text":"The following definiton of a Docker file can be used to run @pnp/generator-spfx in Docker.","title":"How to use Docker with @pnp/spfx generator"},{"location":"howtos/dockerimg/#create-a-folder-for-your-docker-file","text":"Create a folder on your hard drive and add a file named 'Dockerfile'. FROM node:8.12.0 EXPOSE 5432 4321 35729 RUN npm i -g gulp@3 yo @pnp/generator-spfx@latest --unsafe-perm VOLUME /usr/app/spfx WORKDIR /usr/app/spfx RUN useradd --create-home --shell /bin/bash spfx && \\ chown -R spfx:spfx /usr/app/spfx USER spfx CMD /bin/bash","title":"Create a folder for your Docker file"},{"location":"howtos/dockerimg/#build-the-image","text":"The following command creates a persitent container for pnp/spfx. It allows you to start the image faster from any spfx container on your hard drive. To build the docker image execute the form of command: docker build -t <imagename>:<tag> . For example a pnpspfx generator version 1.6.2 could be built and tagged like this. docker build -t pnpspfx:v162 . After the completion of this command the image can be verified with the following command. docker image ls The returned output should look similar to this: REPOSITORY TAG IMAGE ID CREATED SIZE pnpspfx v162 9813ce7b5769 About an hour ago 871MB node 8.12.0 ce426dead114 3 months ago 670MB","title":"Build the image"},{"location":"howtos/dockerimg/#run-docker-image","text":"To run the docker image the following command start the image. docker run -h pnpspfx --name pnpspfx -it -p 5432:5432 -p 4321:4321 -p 35729:35729 pnpspfx:v162 This will open the shell of the docker container. In there the generator can now create a project for example through yo @pnp/spfx .","title":"Run Docker image"},{"location":"howtos/handlebars-upgrade/","text":"Upgrade Handlebar Projects > pnp/spfx 1.9.1 \u00b6 The pnp/spfx generator comes in version 1.20.0 with a new webpack HandlebarsJS loader. The following steps are required to upgrade older projects before 1.10.0. Upgrade package.json \u00b6 The package.json before 1.10.0 has the following handlebars related content. ... \"dependencies\" : { ... \"handlebars\" : \"^4.1.2\" ... }, \"devDependencies\" : { ... \"handlebars-template-loader\" : \"^1.0.0\" , \"@types/handlebars\" : \"^4.1.0\" , ... } ... To upgrade the dependencies execute this npm command: npm uninstall handlebars-template-loader @types/handlebars Install the following dependencies. npm install handlebars-loader --save-dev Upgrade gulpfile.js \u00b6 In the gulpfile.js the configuration of the handlebars-template-loader is configured like this: /** * Custom Framework Specific gulp tasks */ // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-template-loader' }; Update the configuration to: /** * Custom Framework Specific gulp tasks */ // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-loader' // <-- update to handlebars-loader }; This new loader automatically supports partials and helpers automatically.","title":"Upgrade Handlebar Projects > pnp/spfx 1.9.1"},{"location":"howtos/handlebars-upgrade/#upgrade-handlebar-projects-pnpspfx-191","text":"The pnp/spfx generator comes in version 1.20.0 with a new webpack HandlebarsJS loader. The following steps are required to upgrade older projects before 1.10.0.","title":"Upgrade Handlebar Projects &gt; pnp/spfx 1.9.1"},{"location":"howtos/handlebars-upgrade/#upgrade-packagejson","text":"The package.json before 1.10.0 has the following handlebars related content. ... \"dependencies\" : { ... \"handlebars\" : \"^4.1.2\" ... }, \"devDependencies\" : { ... \"handlebars-template-loader\" : \"^1.0.0\" , \"@types/handlebars\" : \"^4.1.0\" , ... } ... To upgrade the dependencies execute this npm command: npm uninstall handlebars-template-loader @types/handlebars Install the following dependencies. npm install handlebars-loader --save-dev","title":"Upgrade package.json"},{"location":"howtos/handlebars-upgrade/#upgrade-gulpfilejs","text":"In the gulpfile.js the configuration of the handlebars-template-loader is configured like this: /** * Custom Framework Specific gulp tasks */ // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-template-loader' }; Update the configuration to: /** * Custom Framework Specific gulp tasks */ // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-loader' // <-- update to handlebars-loader }; This new loader automatically supports partials and helpers automatically.","title":"Upgrade gulpfile.js"},{"location":"howtos/handlebars/","text":"","title":"Handlebars"},{"location":"howtos/jquery/","text":"How to use jQuery \u00b6","title":"How to use jQuery"},{"location":"howtos/jquery/#how-to-use-jquery","text":"","title":"How to use jQuery"},{"location":"howtos/test-coverage/","text":"SharePoint Online \u00b6 SPO Handlebars: \u00b6 WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet SPO Knockout: \u00b6 WebPart ApplicationCustomizer FieldCustomizer = N/A ListViewCommandSet SPO No Framework: \u00b6 WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet SPO ReactJS: \u00b6 WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet SPO VueJS \u00b6 WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet I hope all possible variants of: \u00b6 No Addon or jQuery 2.0 or jQuery 3.0 pnpjs React Property Pane Control","title":"SharePoint Online"},{"location":"howtos/test-coverage/#sharepoint-online","text":"","title":"SharePoint Online"},{"location":"howtos/test-coverage/#spo-handlebars","text":"WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet","title":"SPO Handlebars:"},{"location":"howtos/test-coverage/#spo-knockout","text":"WebPart ApplicationCustomizer FieldCustomizer = N/A ListViewCommandSet","title":"SPO Knockout:"},{"location":"howtos/test-coverage/#spo-no-framework","text":"WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet","title":"SPO No Framework:"},{"location":"howtos/test-coverage/#spo-reactjs","text":"WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet","title":"SPO ReactJS:"},{"location":"howtos/test-coverage/#spo-vuejs","text":"WebPart ApplicationCustomizer FieldCustomizer ListViewCommandSet","title":"SPO VueJS"},{"location":"howtos/test-coverage/#i-hope-all-possible-variants-of","text":"No Addon or jQuery 2.0 or jQuery 3.0 pnpjs React Property Pane Control","title":"I hope all possible variants of:"},{"location":"recipes/","text":"Recipies for Development \u00b6 In this section you will find useful code snippets and explanations. Yeoman \u00b6 Run install SPFx related \u00b6 Inject custom gulp configuration and tasks Deploy Web Part Content, Extensions and Customizer","title":"Recipies for Development"},{"location":"recipes/#recipies-for-development","text":"In this section you will find useful code snippets and explanations.","title":"Recipies for Development"},{"location":"recipes/#yeoman","text":"Run install","title":"Yeoman"},{"location":"recipes/#spfx-related","text":"Inject custom gulp configuration and tasks Deploy Web Part Content, Extensions and Customizer","title":"SPFx related"},{"location":"recipes/deploy-custom-code/","text":"Update provisioned artifacts for web parts, extensions and customizer with generator \u00b6 It is possible to inject code that directly references web parts and extensions. Right now this is only supported for SharePoint Online projects and not for on-premises. The tools folder provides templates to inject code directly in the web part, application customizer, command set, and/or field customizer. tools/spfx \u251c\u2500\u2500 applicationcustomizer-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 commandset-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 fieldcustomizer-spo \u2502 \u251c\u2500\u2500 { componentClassName } .module.scss \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u2514\u2500\u2500 webparts-spo \u251c\u2500\u2500 { componentClassName } .module.scss \u2514\u2500\u2500 { componentClassName } .ts These files will be maintained and updated with every new major release of the Microsoft SharePoint Framework generator. Copy these template files to your generator \u00b6 Copy the files located in the template folder to your custom generator in the template path. The overall setup of the generator should match the following pattern. generators/your-generator/ \u251c\u2500\u2500 index.js \u2514\u2500\u2500 templates \u251c\u2500\u2500 addonConfig.json \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 copy-static-assets.json \u251c\u2500\u2500 gulpfile.js \u2514\u2500\u2500 spfx \u251c\u2500\u2500 applicationcustomizer-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 fieldcustomizer-spo \u2502 \u251c\u2500\u2500 { componentClassName } .module.scss \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 listviewcommandset-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u2514\u2500\u2500 webpart-spo \u251c\u2500\u2500 { componentClassName } .module.scss \u2514\u2500\u2500 { componentClassName } .ts Now modify the files to match your requirements. For example, the HandlebarsJS generator has the following lines of code added to the import statements when generating a web part: import { Version } from '@microsoft/sp-core-library' ; import { BaseClientSideWebPart , IPropertyPaneConfiguration , PropertyPaneTextField } from '@microsoft/sp-webpart-base' ; import { escape } from '@microsoft/sp-lodash-subset' ; import styles from './<%= componentClassName %>.module.scss' ; import * as strings from '<%= componentStrings %>' ; import * as Handlebars from 'handlebars' ; export interface I <%= componentClassName %> Props { description : string ; } export default class <%= componentClassName %> extends BaseClientSideWebPart < I <%= componentClassName %> Props > { ... The only code in this example that was added is the following line: import * as Handlebars from 'handlebars' ; This make sure that after the provisioning of a web part, coding can start immediately. Deploy custom code in generator \u00b6 The files located in the SPFx folder serve as templates for all customizable assets. The names should not be changed because this will cause the whole deployment to break. To make sure the template gets deployed, a small utility needs to be called directly in the installation method of the Yeoman generator. Make sure you reference the utility class in your Yeoman generator code: // importing utilities const util = require ( '../../lib/util.js' ); In the install method call the following utility method: install () { // # BUG currently only appears just in test util . deployTemplates ( this ); } This utility will detect which component got added during the regular SPFx runtime and adds the code directly to the file.","title":"Deploy Custom Code"},{"location":"recipes/deploy-custom-code/#update-provisioned-artifacts-for-web-parts-extensions-and-customizer-with-generator","text":"It is possible to inject code that directly references web parts and extensions. Right now this is only supported for SharePoint Online projects and not for on-premises. The tools folder provides templates to inject code directly in the web part, application customizer, command set, and/or field customizer. tools/spfx \u251c\u2500\u2500 applicationcustomizer-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 commandset-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 fieldcustomizer-spo \u2502 \u251c\u2500\u2500 { componentClassName } .module.scss \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u2514\u2500\u2500 webparts-spo \u251c\u2500\u2500 { componentClassName } .module.scss \u2514\u2500\u2500 { componentClassName } .ts These files will be maintained and updated with every new major release of the Microsoft SharePoint Framework generator.","title":"Update provisioned artifacts for web parts, extensions and customizer with generator"},{"location":"recipes/deploy-custom-code/#copy-these-template-files-to-your-generator","text":"Copy the files located in the template folder to your custom generator in the template path. The overall setup of the generator should match the following pattern. generators/your-generator/ \u251c\u2500\u2500 index.js \u2514\u2500\u2500 templates \u251c\u2500\u2500 addonConfig.json \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 copy-static-assets.json \u251c\u2500\u2500 gulpfile.js \u2514\u2500\u2500 spfx \u251c\u2500\u2500 applicationcustomizer-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 fieldcustomizer-spo \u2502 \u251c\u2500\u2500 { componentClassName } .module.scss \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u251c\u2500\u2500 listviewcommandset-spo \u2502 \u2514\u2500\u2500 { componentClassName } .ts \u2514\u2500\u2500 webpart-spo \u251c\u2500\u2500 { componentClassName } .module.scss \u2514\u2500\u2500 { componentClassName } .ts Now modify the files to match your requirements. For example, the HandlebarsJS generator has the following lines of code added to the import statements when generating a web part: import { Version } from '@microsoft/sp-core-library' ; import { BaseClientSideWebPart , IPropertyPaneConfiguration , PropertyPaneTextField } from '@microsoft/sp-webpart-base' ; import { escape } from '@microsoft/sp-lodash-subset' ; import styles from './<%= componentClassName %>.module.scss' ; import * as strings from '<%= componentStrings %>' ; import * as Handlebars from 'handlebars' ; export interface I <%= componentClassName %> Props { description : string ; } export default class <%= componentClassName %> extends BaseClientSideWebPart < I <%= componentClassName %> Props > { ... The only code in this example that was added is the following line: import * as Handlebars from 'handlebars' ; This make sure that after the provisioning of a web part, coding can start immediately.","title":"Copy these template files to your generator"},{"location":"recipes/deploy-custom-code/#deploy-custom-code-in-generator","text":"The files located in the SPFx folder serve as templates for all customizable assets. The names should not be changed because this will cause the whole deployment to break. To make sure the template gets deployed, a small utility needs to be called directly in the installation method of the Yeoman generator. Make sure you reference the utility class in your Yeoman generator code: // importing utilities const util = require ( '../../lib/util.js' ); In the install method call the following utility method: install () { // # BUG currently only appears just in test util . deployTemplates ( this ); } This utility will detect which component got added during the regular SPFx runtime and adds the code directly to the file.","title":"Deploy custom code in generator"},{"location":"recipes/inject-gulp-tasks/","text":"Inject custom gulp task \u00b6 To inject a custom gulp task into a SharePoint Framework generated gulpfile.js , use the following method. Add a file named gulpfile.js in the templates folder of the custom generator. The following code sample shows the content taken from the Handlebars generator and registers the web pack loader along with a custom gulp watch: // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-template-loader' }; // Merge custom loader to web pack configuration build . configureWebpack . mergeConfig ({ additionalConfiguration : ( generatedConfiguration ) => { generatedConfiguration . module . rules . push ( loaderConfig ); return generatedConfiguration ; } }); // marker to check if custom watch is already registered // used to prevent watch bubbling let customWatchRegistered = false ; // Register watches sub task to move hbs files over to libs directory let hbsWatch = build . subTask ( 'hbsWatch' , ( gulp , buildOptions , done ) => { // register watch only on first run if ( ! customWatchRegistered ) { // on change of *.hbs files gulp . watch ( './src/**/*.hbs' , event => { // copy hbs from src to lib gulp . src ( './src/**/*.hbs' ) . pipe ( gulp . dest ( './lib/' )); // copy empty index.ts onto itself to launch build procees gulp . src ( './src/index.ts' ) . pipe ( gulp . dest ( './src/' )); }); // after watch is registered don't register again customWatchRegistered = true ; } else { // make sure preBuild file will be copied once again gulp . src ( './src/**/*.hbs' ) . pipe ( gulp . dest ( './lib/' )); } // tell build.rig the work is done. done (); }); build . rig . addPreBuildTask ( hbsWatch ); This file should only contain the required code that needs added to the SPFx owned gulpfile.js . Add the following code index.js after the end() method: _injectToGulpFile () { if ( fs . existsSync ( this . destinationPath ( 'gulpfile.js' ))) { let coreGulpTemplate = this . templatePath ( '../../../app/templates/gulpfile.js' ); let customGulpTemplate = this . templatePath ( './gulpfile.js' ) let mergedGulpFile = util . composeGulpFile ( coreGulpTemplate , customGulpTemplate ); fs . writeFileSync ( this . destinationPath ( './gulpfile.js' ), mergedGulpFile , 'utf-8' ); } } To execute the injection of your custom task in gulpfile.js , call this method from the install() method: install () { this . _injectToGulpFile (); } To verify, execute the yeoman generator and look up the changes within gulpfile.js in the project directory.","title":"Inject gulp tasks"},{"location":"recipes/inject-gulp-tasks/#inject-custom-gulp-task","text":"To inject a custom gulp task into a SharePoint Framework generated gulpfile.js , use the following method. Add a file named gulpfile.js in the templates folder of the custom generator. The following code sample shows the content taken from the Handlebars generator and registers the web pack loader along with a custom gulp watch: // definition of Handlebars loader const loaderConfig = { test : /\\.hbs/ , loader : 'handlebars-template-loader' }; // Merge custom loader to web pack configuration build . configureWebpack . mergeConfig ({ additionalConfiguration : ( generatedConfiguration ) => { generatedConfiguration . module . rules . push ( loaderConfig ); return generatedConfiguration ; } }); // marker to check if custom watch is already registered // used to prevent watch bubbling let customWatchRegistered = false ; // Register watches sub task to move hbs files over to libs directory let hbsWatch = build . subTask ( 'hbsWatch' , ( gulp , buildOptions , done ) => { // register watch only on first run if ( ! customWatchRegistered ) { // on change of *.hbs files gulp . watch ( './src/**/*.hbs' , event => { // copy hbs from src to lib gulp . src ( './src/**/*.hbs' ) . pipe ( gulp . dest ( './lib/' )); // copy empty index.ts onto itself to launch build procees gulp . src ( './src/index.ts' ) . pipe ( gulp . dest ( './src/' )); }); // after watch is registered don't register again customWatchRegistered = true ; } else { // make sure preBuild file will be copied once again gulp . src ( './src/**/*.hbs' ) . pipe ( gulp . dest ( './lib/' )); } // tell build.rig the work is done. done (); }); build . rig . addPreBuildTask ( hbsWatch ); This file should only contain the required code that needs added to the SPFx owned gulpfile.js . Add the following code index.js after the end() method: _injectToGulpFile () { if ( fs . existsSync ( this . destinationPath ( 'gulpfile.js' ))) { let coreGulpTemplate = this . templatePath ( '../../../app/templates/gulpfile.js' ); let customGulpTemplate = this . templatePath ( './gulpfile.js' ) let mergedGulpFile = util . composeGulpFile ( coreGulpTemplate , customGulpTemplate ); fs . writeFileSync ( this . destinationPath ( './gulpfile.js' ), mergedGulpFile , 'utf-8' ); } } To execute the injection of your custom task in gulpfile.js , call this method from the install() method: install () { this . _injectToGulpFile (); } To verify, execute the yeoman generator and look up the changes within gulpfile.js in the project directory.","title":"Inject custom gulp task"},{"location":"recipes/run-install/","text":"Run install npm packages from generator \u00b6 After all required modifications have been applied to a new project by the Yeoman generator, the npm packages need to be installed. To provide a consistent method for all generators, a utility class was implemented that provides a single method to run the installer. Default behaviour of the installer \u00b6 Like the SPFx Default Yeoman generator installer, it supports the following three package managers: npm pnpm yarn Be default, the npm package manager will be used. If the yarn package manager is installed on the client, this package manager will instead be used by default. The pnpm package manager is available via a command line switch when the yeoman generator gets launched. To install dependencies with a specific package manager, the following options exist: To explicitly use npm: yo @pnp/spfx --pm npm or yo @pnp/spfx --package-manager npm To explicitly use pnpm: yo @pnp/spfx --pm pnpm or yo @pnp/spfx --package-manager pnpm To explicitly use pnpm: yo @pnp/spfx --pm yarn or yo @pnp/spfx --package-manager yarn Reference to the Util \u00b6 Your generators index.js should include the following line of code somewhere at the start: // importing utilities const util = require ( '../../lib/util.js' ); Call npm package installation \u00b6 Add the following line of code in the install method of your generator: install (){ /* Custom configuration code should be placed before the installer */ util . runInstall ( this ); }","title":"Run Install"},{"location":"recipes/run-install/#run-install-npm-packages-from-generator","text":"After all required modifications have been applied to a new project by the Yeoman generator, the npm packages need to be installed. To provide a consistent method for all generators, a utility class was implemented that provides a single method to run the installer.","title":"Run install npm packages from generator"},{"location":"recipes/run-install/#default-behaviour-of-the-installer","text":"Like the SPFx Default Yeoman generator installer, it supports the following three package managers: npm pnpm yarn Be default, the npm package manager will be used. If the yarn package manager is installed on the client, this package manager will instead be used by default. The pnpm package manager is available via a command line switch when the yeoman generator gets launched. To install dependencies with a specific package manager, the following options exist: To explicitly use npm: yo @pnp/spfx --pm npm or yo @pnp/spfx --package-manager npm To explicitly use pnpm: yo @pnp/spfx --pm pnpm or yo @pnp/spfx --package-manager pnpm To explicitly use pnpm: yo @pnp/spfx --pm yarn or yo @pnp/spfx --package-manager yarn","title":"Default behaviour of the installer"},{"location":"recipes/run-install/#reference-to-the-util","text":"Your generators index.js should include the following line of code somewhere at the start: // importing utilities const util = require ( '../../lib/util.js' );","title":"Reference to the Util"},{"location":"recipes/run-install/#call-npm-package-installation","text":"Add the following line of code in the install method of your generator: install (){ /* Custom configuration code should be placed before the installer */ util . runInstall ( this ); }","title":"Call npm package installation"},{"location":"tools/util/","text":"Util - Overview \u00b6 The util module can be found in the './lib/' directory and contains the following methods. mergeAddons(addonConfig, requestedLibraries, config) \u00b6 This method merges add-ons in package.json . addonConfig Configuration of add-ons available in the generator. requestedLibraries Array of requested library identifiers. config Given configuration to merge add-ons in the currently used package.json , for example. composeGulpFile(coreTemplate, customTemplate) \u00b6 This method allows you to inject custom gulp tasks in the gulp file. coreTemplate Path to any gulp file you would like to use as a template. customTemplate Contains all your custom gulp tasks you would like to inject. The core template in the generator provided by SPFx is located in the folder /app/templates/gulpfile.js and contains the following EJS code: 'use strict' ; const gulp = require ( 'gulp' ); const build = require ( '@microsoft/sp-build-web' ); build . addSuppression ( `Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.` ); <%= customTasks %> build . initialize ( gulp ); The custom generator can point to this file using the following code: let coreGulpTemplate = this . templatePath ( '../../../app/templates/gulpfile.js' ); The following example shows a simple custom code snippet that should be included in the gulp file: // code to inject in gulp file console . log ( 'Hello PnP SPFx generator' ); The resulting gulpfile.js after the merge in this case will be: 'use strict' ; const gulp = require ( 'gulp' ); const build = require ( '@microsoft/sp-build-web' ); build . addSuppression ( `Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.` ); // code to inject in gulp file console . log ( 'Hello PnP SPFx generator' ); build . initialize ( gulp );","title":"Util - Overview"},{"location":"tools/util/#util-overview","text":"The util module can be found in the './lib/' directory and contains the following methods.","title":"Util - Overview"},{"location":"tools/util/#mergeaddonsaddonconfig-requestedlibraries-config","text":"This method merges add-ons in package.json . addonConfig Configuration of add-ons available in the generator. requestedLibraries Array of requested library identifiers. config Given configuration to merge add-ons in the currently used package.json , for example.","title":"mergeAddons(addonConfig, requestedLibraries, config)"},{"location":"tools/util/#composegulpfilecoretemplate-customtemplate","text":"This method allows you to inject custom gulp tasks in the gulp file. coreTemplate Path to any gulp file you would like to use as a template. customTemplate Contains all your custom gulp tasks you would like to inject. The core template in the generator provided by SPFx is located in the folder /app/templates/gulpfile.js and contains the following EJS code: 'use strict' ; const gulp = require ( 'gulp' ); const build = require ( '@microsoft/sp-build-web' ); build . addSuppression ( `Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.` ); <%= customTasks %> build . initialize ( gulp ); The custom generator can point to this file using the following code: let coreGulpTemplate = this . templatePath ( '../../../app/templates/gulpfile.js' ); The following example shows a simple custom code snippet that should be included in the gulp file: // code to inject in gulp file console . log ( 'Hello PnP SPFx generator' ); The resulting gulpfile.js after the merge in this case will be: 'use strict' ; const gulp = require ( 'gulp' ); const build = require ( '@microsoft/sp-build-web' ); build . addSuppression ( `Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.` ); // code to inject in gulp file console . log ( 'Hello PnP SPFx generator' ); build . initialize ( gulp );","title":"composeGulpFile(coreTemplate, customTemplate)"}]}